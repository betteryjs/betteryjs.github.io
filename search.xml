<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux下使用selenium</title>
      <link href="/2020/07/26/linux%E4%B8%8B%E4%BD%BF%E7%94%A8selenium/"/>
      <url>/2020/07/26/linux%E4%B8%8B%E4%BD%BF%E7%94%A8selenium/</url>
      
        <content type="html"><![CDATA[<h2 id="安装最新的-Google-Chrome"><a href="#安装最新的-Google-Chrome" class="headerlink" title="安装最新的 Google Chrome"></a>安装最新的 Google Chrome</h2><pre class=" language-sh"><code class="language-sh">yum install https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</code></pre><h2 id="安装必要的库"><a href="#安装必要的库" class="headerlink" title="安装必要的库"></a>安装必要的库</h2><pre class=" language-shell"><code class="language-shell">yum install mesa-libOSMesa-devel gnu-free-sans-fonts wqy-zenhei-fonts</code></pre><h2 id="查看谷歌浏览器版本"><a href="#查看谷歌浏览器版本" class="headerlink" title="查看谷歌浏览器版本"></a>查看谷歌浏览器版本</h2><pre class=" language-shell"><code class="language-shell">google-chrome --version </code></pre><h2 id="安装-chromedriver"><a href="#安装-chromedriver" class="headerlink" title="安装 chromedriver"></a>安装 chromedriver</h2><pre class=" language-sh"><code class="language-sh">wget http://npm.taobao.org/mirrors/chromedriver/2.41/chromedriver_linux64.zipunzip chromedriver_linux64.zipchmod +x /usr/bin/chromedriver</code></pre><h2 id="加入path"><a href="#加入path" class="headerlink" title="加入path"></a>加入path</h2><pre class=" language-shell"><code class="language-shell">vim .bashrc在里面加入：export PATH="$PATH:/usr/bin/chromedriver"source ~/.bashrc</code></pre><h2 id="查看path"><a href="#查看path" class="headerlink" title="查看path"></a>查看<code>path</code></h2><pre class=" language-shell"><code class="language-shell">$PATH</code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Optionschrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 参数是让Chrome在root权限下跑</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-dev-shm-usage'</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 参数是不用打开图形界面</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span></code></pre><img src="linux下使用selenium/test.jpg" alt="test" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程和进程</title>
      <link href="/2020/07/26/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/"/>
      <url>/2020/07/26/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><blockquote><p><strong>线程</strong>（英语：<code>thread</code>）是<a href="https://baike.baidu.com/item/操作系统" target="_blank" rel="noopener">操作系统</a>能够进行运算<a href="https://baike.baidu.com/item/调度" target="_blank" rel="noopener">调度</a>的最小单位。它被包含在<a href="https://baike.baidu.com/item/进程" target="_blank" rel="noopener">进程</a>之中，是<a href="https://baike.baidu.com/item/进程" target="_blank" rel="noopener">进程</a></p><p>中的实际运作单位。</p></blockquote><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sing'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dance'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># target 需要的是一个函数，用来指定线程需要执行的任务</span>t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>dance<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建了线程1</span>t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sing<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建了线程2</span><span class="token comment" spellcheck="true"># 启动线程</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="多个线程可以共用一个全局变量"><a href="#多个线程可以共用一个全局变量" class="headerlink" title="多个线程可以共用一个全局变量"></a>多个线程可以共用一个全局变量</h3><ul><li>全局解释器锁</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 定义全局变量 ticket</span>ticket<span class="token operator">=</span><span class="token number">20</span><span class="token comment" spellcheck="true"># 创建锁</span>lock<span class="token operator">=</span>threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sell_ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> ticket    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 加锁 阻止另外的线程进入 修改全局变量</span>        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            ticket<span class="token operator">-=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 事件完成之后开锁</span>            lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}卖出一张，剩{} 张'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>ticket<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'no ticket!'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token comment" spellcheck="true"># 创建两个线程</span>t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sell_ticket<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'线程1'</span><span class="token punctuation">)</span>t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sell_ticket<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'线程2'</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="线程之间进行通信"><a href="#线程之间进行通信" class="headerlink" title="线程之间进行通信"></a>线程之间进行通信</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> queue<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'生产了面包 '</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 生产者向队列中加入內容</span>        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>f<span class="token string">'break{i}'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># q.get() 方法是一个堵塞的方法</span>        <span class="token comment" spellcheck="true"># 消费者从队列中取到先放入的內容</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'买到了面包 {q.get()}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建队列  先进先出</span>q<span class="token operator">=</span>queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>p1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>produce<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'p1'</span><span class="token punctuation">)</span>c1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>customer<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'c1'</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li><p><code>ThreadPoolExecutor</code></p></li><li><p><code>url_list</code> 包含的是所有<code>down_ts</code> 里的列表</p></li><li><p>多用于耗时操作 <code>resquest</code>  <code>file IO</code>等</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>thread <span class="token keyword">import</span> ThreadPoolExecutor_ThreadPool_max_workers<span class="token operator">=</span><span class="token number">20</span>  <span class="token comment" spellcheck="true"># 启动的线程数20个线程</span>url_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span><span class="token string">'https://www.163.com'</span><span class="token punctuation">,</span><span class="token string">'https://www.qq.com'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">down_ts</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">multi_threaded_download</span><span class="token punctuation">(</span>url_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span>_ThreadPool_max_workers<span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>        executor<span class="token punctuation">.</span>map<span class="token punctuation">(</span>down_ts<span class="token punctuation">,</span> url_list<span class="token punctuation">)</span></code></pre><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><blockquote><p><strong>进程</strong>（<code>Process</code>）是计算机中的程序关于某数据集合上的一次运行活动，是<strong>系统</strong>进行资源<strong>分配</strong>和</p><p><strong>调度</strong>的基本单位</p></blockquote><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'dancing  pid={os.getpid()}'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">song</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'song  pid={os.getpid()}'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'主进程ID{os.getpid()}'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建了两个进程</span>    <span class="token comment" spellcheck="true"># target 用来表示执行的任务 args 有来传参 ，类型是一个元组</span>    p1<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>dance<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p2<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>song<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="多进程之间不能共享全局变量"><a href="#多进程之间不能共享全局变量" class="headerlink" title="多进程之间不能共享全局变量"></a>多进程之间不能共享全局变量</h3><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">produce</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'生产了++++++++++pid {os.getpid()}  {i}'</span><span class="token punctuation">)</span>        x<span class="token punctuation">.</span>put<span class="token punctuation">(</span>f<span class="token string">'pid {os.getpid()} {i}'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'消费了---------- {x.get()}'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    p1<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>produce<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    c2<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>consumer <span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    c2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><ul><li><code>ProcessPoolExecutor</code></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    t_start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{msg} 开始执行，进程ID {os.getpid()}'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token string">'执行完毕花费 {} s'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>t_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    _ProcessPool_max_workers<span class="token operator">=</span><span class="token number">3</span>    workers<span class="token operator">=</span>list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> ProcessPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span>_ProcessPool_max_workers<span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>            executor<span class="token punctuation">.</span>map<span class="token punctuation">(</span>worker<span class="token punctuation">,</span> workers<span class="token punctuation">)</span></code></pre><ul><li><h3 id="multiprocessing中的Pool-进程池"><a href="#multiprocessing中的Pool-进程池" class="headerlink" title="multiprocessing中的Pool 进程池"></a><code>multiprocessing</code>中的<code>Pool</code> 进程池</h3></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>pool <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    t_start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{msg} 开始执行，进程ID {os.getpid()}'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token string">'执行完毕花费 {} s'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>t_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool<span class="token operator">=</span>Pool<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Pool.apply_async(要调用的目标,(传递给目标的参数元组,))</span>        <span class="token comment" spellcheck="true"># 每次循环将会用空闲出来的子进程去调用目标</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>worker<span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># pool.map(worker,list(range(10)))  或者调用map函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------======start=====-----'</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 关闭进程池，关闭后pool不再接受新的请求</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 等待pool中的所有子进程完成，必须放在close语句后 给主进程让步</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------======stop=====-----'</span><span class="token punctuation">)</span></code></pre><h2 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列 queue"></a>队列 <code>queue</code></h2><ul><li>进程间通信</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessingq<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建队列时可以指定最大的长度  默认值是0 表示不限长度</span>q<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 长度最多只有5个 够5个后就开始堵塞 直到取出队列中的元素才可以放入元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>full<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 判断队列是否满了</span><span class="token comment" spellcheck="true"># 往队列里放了 'how'  block=True 表示是堵塞的，如果队列满了就进行等待</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'how'</span><span class="token punctuation">,</span>block<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 不进行等待</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span>block<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>time<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># block=True 表示是堵塞的，如果队列满了就进行等待</span></code></pre><ul><li>线程间通信</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> queueq<span class="token operator">=</span>queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="二者之间的关系与联系"><a href="#二者之间的关系与联系" class="headerlink" title="二者之间的关系与联系"></a>二者之间的关系与联系</h2><blockquote><p>同一进程之间的不同线程可以共享全局变量</p><p>不同进程之间不能共享全局变量</p><p>一个程序里至少要有一个主进程，一个主进程里至少有一个主线程</p></blockquote><h2 id="多线程与多进程的使用"><a href="#多线程与多进程的使用" class="headerlink" title="多线程与多进程的使用"></a>多线程与多进程的使用</h2><blockquote><p><code>Python</code>底层只要使用线程默认加锁</p><p>在多个<code>CPU</code>进行切换时　由于<code>GIL</code>(全局解释器锁的存在)　多进程的效率高于多线程</p><p>在<code>request</code>发送请求时需要耗时　可使用多个线程提高程序的效率</p><p>在需要进行大量的<code>IO</code>读写时使用多线程</p><p>在进行大量的计算时使用多进程</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
