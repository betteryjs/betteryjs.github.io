<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Centos安装图像化界面</title>
      <link href="/2020/08/02/Centos%E5%AE%89%E8%A3%85%E5%9B%BE%E5%83%8F%E5%8C%96%E7%95%8C%E9%9D%A2/"/>
      <url>/2020/08/02/Centos%E5%AE%89%E8%A3%85%E5%9B%BE%E5%83%8F%E5%8C%96%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="安装GNOME桌面"><a href="#安装GNOME桌面" class="headerlink" title="安装GNOME桌面"></a>安装GNOME桌面</h2><blockquote><p>时间会稍微长一些，因为要下载大概600M的东西</p></blockquote><pre><code>yum install -y  epel-release &amp;&amp; yum -y updateyum groupinstall &quot;GNOME Desktop&quot; &quot;Graphical Administration Tools&quot;</code></pre><h2 id="安装VNC-Server"><a href="#安装VNC-Server" class="headerlink" title="安装VNC Server"></a>安装VNC Server</h2><pre><code>yum -y install vnc &quot;vnc-server&quot;</code></pre><h2 id="设置vnc-server-密码"><a href="#设置vnc-server-密码" class="headerlink" title="设置vnc server 密码"></a>设置vnc server 密码</h2><pre><code>vncserver</code></pre><blockquote><p>输入两次密码</p></blockquote><h2 id="启动vncserver"><a href="#启动vncserver" class="headerlink" title="启动vncserver"></a>启动vncserver</h2><p>注意这里的<code>:1</code>前面有空格！</p><pre><code>vncserver :1</code></pre><h2 id="查看并在云服务器后台开方端口"><a href="#查看并在云服务器后台开方端口" class="headerlink" title="查看并在云服务器后台开方端口"></a>查看并在云服务器后台开方端口</h2><ul><li><h3 id="如图找到相应的端口"><a href="#如图找到相应的端口" class="headerlink" title="如图找到相应的端口"></a>如图找到相应的端口</h3></li></ul><pre><code> ps -aux |grep vnc</code></pre><img src="查看VNC的端口.png" alt=""  /><ul><li><h3 id="在阿里云后台开发端口"><a href="#在阿里云后台开发端口" class="headerlink" title="在阿里云后台开发端口"></a>在阿里云后台开发端口</h3></li></ul><p><img src="%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E7%AB%AF%E5%8F%A3.png" alt=""></p><h2 id="下载安装-vncviewer"><a href="#下载安装-vncviewer" class="headerlink" title="下载安装 vncviewer"></a>下载安装 <code>vncviewer</code></h2><ul><li>给出官网地址 自行下载安装</li></ul><p>(vncviewer)[<a href="https://www.realvnc.com/en/connect/download/viewer/]" target="_blank" rel="noopener">https://www.realvnc.com/en/connect/download/viewer/]</a></p><ul><li><code>vncviewer</code>连接服务器</li></ul><img src="connection1.png" alt=""  /><img src="connection2.png" alt=""  /><img src="connection3.jpg" alt=""  /><p><img src="connection4.png" alt=""></p><h2 id="关闭VNC进程"><a href="#关闭VNC进程" class="headerlink" title="关闭VNC进程"></a>关闭<code>VNC</code>进程</h2><pre><code>vncserver -kill :1</code></pre><h2 id="设置centos系统默认的启动方式"><a href="#设置centos系统默认的启动方式" class="headerlink" title="设置centos系统默认的启动方式"></a>设置<code>centos</code>系统默认的启动方式</h2><pre><code>systemctl set-default multi-user.target  //设置成命令模式systemctl set-default graphical.target  //设置成图形模式</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>screen管理会话</title>
      <link href="/2020/07/28/screen%E7%AE%A1%E7%90%86%E4%BC%9A%E8%AF%9D/"/>
      <url>/2020/07/28/screen%E7%AE%A1%E7%90%86%E4%BC%9A%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="开始使用Screen"><a href="#开始使用Screen" class="headerlink" title="开始使用Screen"></a>开始使用Screen</h2><p>简单来说，Screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。在screen中创建一个新的窗口有这样几种方式：</p><p>1．直接在命令行键入screen命令</p><pre><code>[root@tivf06 ~]# screen</code></pre><p>Screen将创建一个执行shell的全屏窗口。你可以执行任意shell程序，就像在ssh窗口中那样。在该窗口中键入exit退出该窗口，如果这是该screen会话的唯一窗口，该screen会话退出，否则screen自动切换到前一个窗口。</p><p>2．Screen命令后跟你要执行的程序。</p><pre><code>[root@tivf06 ~]# screen vi test.c</code></pre><p>Screen创建一个执行vi test.c的单窗口会话，退出vi将退出该窗口/会话。</p><p>3．以上两种方式都创建新的screen会话。我们还可以在一个已有screen会话中创建新的窗口。在当前screen窗口中键入<code>C-a c</code>，即Ctrl键+a键，之后再按下c键，screen 在该会话内生成一个新的窗口并切换到该窗口。</p><p>screen还有更高级的功能。你可以不中断screen窗口中程序的运行而暂时断开（detach）screen会话，并在随后时间重新连接（attach）该会话，重新控制各窗口中运行的程序。例如，我们打开一个screen窗口编辑/tmp/abc文件：</p><pre><code>[root@tivf06 ~]# screen vi /tmp/abc</code></pre><p>之后我们想暂时退出做点别的事情，比如出去散散步，那么在screen窗口键入<code>C-a d</code>，Screen会给出detached提示：</p><h5 id="暂时中断会话"><a href="#暂时中断会话" class="headerlink" title="暂时中断会话"></a>暂时中断会话</h5><p><img src="vi.jpg" alt="暂时中断会话"></p><p>半个小时之后回来了，找到该screen会话：</p><pre><code>[root@tivf06 ~]# screen -ls``There is a screen on:``    ``16582.pts-1.tivf06   (Detached)``1 Socket in /tmp/screens/S-root.</code></pre><p>重新连接会话：</p><pre><code>[root@tivf06 ~]# screen -r 16582</code></pre><p>看看出现什么了，太棒了，一切都在。继续干吧。</p><p>你可能注意到给screen发送命令使用了特殊的键组合C-a。这是因为我们在键盘上键入的信息是直接发送给当前screen窗口，必须用其他方式向screen窗口管理器发出命令，默认情况下，screen接收以C-a开始的命令。这种命令形式在screen中叫做键绑定（key binding），C-a叫做命令字符（command character）。</p><p>可以通过<code>C-a ?</code>来查看所有的键绑定，常用的键绑定有：</p><pre><code>C-a ?     显示所有键绑定信息C-a w显示所有窗口列表C-a C-a切换到之前显示的窗口C-a c创建一个新的运行shell的窗口并切换到该窗口C-a n切换到下一个窗口C-a p切换到前一个窗口(与C-a n相对)C-a 0..9切换到窗口0..9C-a a发送 C-a到当前窗口C-a d暂时断开screen会话C-a k杀掉当前窗口C-a [进入拷贝/回滚模式</code></pre><h2 id="Screen常用选项"><a href="#Screen常用选项" class="headerlink" title="Screen常用选项"></a>Screen常用选项</h2><p>使用键绑定C-a ?命令可以看到, 默认的命令字符（Command key）为C-a，转义C-a（literal ^a）的字符为a：</p><h5 id="Screen-常用选项"><a href="#Screen-常用选项" class="headerlink" title="Screen 常用选项"></a>Screen 常用选项</h5><p><img src="keybindings.jpg" alt="Screen 常用选项"></p><p>因为screen把C-a看作是screen命令的开始，所以如果你想要screen窗口接收到C-a字符，就要输入C-a a。Screen也允许你使用-e选项设置自己的命令字符和转义字符，其格式为：</p><p>-exy x为命令字符，y为转义命令字符的字符</p><p>下面命令启动的screen会话指定了命令字符为C-t，转义C-t的字符为t，通过C-t ?命令可以看到该变化。</p><pre><code>[root@tivf18 root]# screen -e^tt</code></pre><h5 id="自定义命令字符和转义字符"><a href="#自定义命令字符和转义字符" class="headerlink" title="自定义命令字符和转义字符"></a>自定义命令字符和转义字符</h5><p><img src="newkeybinding.jpg" alt="自定义命令字符和转义字符"></p><h2 id="管理你的远程会话"><a href="#管理你的远程会话" class="headerlink" title="管理你的远程会话"></a>管理你的远程会话</h2><p>先来看看如何使用screen解决SIGHUP问题，比如现在我们要ftp传输一个大文件。如果按老的办法，SSH登录到系统，直接ftp命令开始传输，之后。。如果网络速度还可以，恭喜你，不用等太长时间了；如果网络不好，老老实实等着吧，只能传输完毕再断开SSH连接了。让我们使用screen来试试。</p><p>SSH登录到系统，在命令行键入screen。</p><pre><code>[root@tivf18 root]# screen</code></pre><p>在screen shell窗口中输入ftp命令，登录，开始传输。不愿意等了？OK，在窗口中键入C-a d：</p><h5 id="管理你的远程会话-1"><a href="#管理你的远程会话-1" class="headerlink" title="管理你的远程会话"></a>管理你的远程会话</h5><p><img src="ftp.jpg" alt="管理你的远程会话"></p><p>然后。。退出SSH登录？随你怎样，只要别杀掉screen会话。</p><p>是不是很方便？更进一步，其实我们可以利用screen这种功能来管理你的远程会话，保存你所有的工作内容。你是不是每次登录到系统都要开很多窗口，然后每天都要重复打开关闭这些窗口？让screen来帮你“保存”吧，你只需要打开一个ssh窗口，创建需要的screen窗口，退出的时候C-a d“保存”你的工作，下次登录后直接screen -r <screen_pid>就可以了。</p><p>最好能给每个窗口起一个名字，这样好记些。使用C-a A给窗口起名字。使用C-a w可以看到这些窗口名字，可能名字出现的位置不同。使用putty：</p><h5 id="putty"><a href="#putty" class="headerlink" title="putty"></a>putty</h5><p><img src="putty.jpg" alt="putty"></p><p>使用telnet：</p><h5 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h5><p><img src="telnet.jpg" alt="telnet"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2020/07/26/Redis/"/>
      <url>/2020/07/26/Redis/</url>
      
        <content type="html"><![CDATA[<p><img src="Redis.png" alt="Redis"></p><blockquote><p>给出xmind文件地址</p></blockquote><p><a href="https://1drv.ms/u/s!Ah1WHCLi3Lhigo1rsnFIWDgPaTIFOg?e=JdMCTZ" target="_blank" rel="noopener">Redis.xmind</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下使用selenium</title>
      <link href="/2020/07/26/linux%E4%B8%8B%E4%BD%BF%E7%94%A8selenium/"/>
      <url>/2020/07/26/linux%E4%B8%8B%E4%BD%BF%E7%94%A8selenium/</url>
      
        <content type="html"><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li><code>Centos 7</code></li><li>注意不要使用<code>Centos8</code> 会出现下面的库安装不上的问题</li></ul><h2 id="安装最新的-Google-Chrome"><a href="#安装最新的-Google-Chrome" class="headerlink" title="安装最新的 Google Chrome"></a>安装最新的 Google Chrome</h2><pre class=" language-sh"><code class="language-sh">yum install https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</code></pre><h2 id="安装必要的库"><a href="#安装必要的库" class="headerlink" title="安装必要的库"></a>安装必要的库</h2><pre class=" language-shell"><code class="language-shell">yum install mesa-libOSMesa-devel gnu-free-sans-fonts wqy-zenhei-fonts</code></pre><h2 id="查看谷歌浏览器版本"><a href="#查看谷歌浏览器版本" class="headerlink" title="查看谷歌浏览器版本"></a>查看谷歌浏览器版本</h2><pre class=" language-shell"><code class="language-shell">google-chrome --version </code></pre><h2 id="安装-chromedriver"><a href="#安装-chromedriver" class="headerlink" title="安装 chromedriver"></a>安装 <code>chromedriver</code></h2><pre class=" language-sh"><code class="language-sh">wget http://npm.taobao.org/mirrors/chromedriver/2.41/chromedriver_linux64.zipunzip chromedriver_linux64.zipmv chromedriver /usr/bin/chmod +x /usr/bin/chromedriver</code></pre><h2 id="加入path"><a href="#加入path" class="headerlink" title="加入path"></a>加入path</h2><pre class=" language-shell"><code class="language-shell">vim .bashrc在里面加入：export PATH="$PATH:/usr/bin/chromedriver"source ~/.bashrc</code></pre><h2 id="查看path"><a href="#查看path" class="headerlink" title="查看path"></a>查看<code>path</code></h2><pre class=" language-shell"><code class="language-shell">$PATH</code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Optionschrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 参数是让Chrome在root权限下跑</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-dev-shm-usage'</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 参数是不用打开图形界面</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程和进程</title>
      <link href="/2020/07/26/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/"/>
      <url>/2020/07/26/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><blockquote><p><strong>线程</strong>（英语：<code>thread</code>）是<a href="https://baike.baidu.com/item/操作系统" target="_blank" rel="noopener">操作系统</a>能够进行运算<a href="https://baike.baidu.com/item/调度" target="_blank" rel="noopener">调度</a>的最小单位。它被包含在<a href="https://baike.baidu.com/item/进程" target="_blank" rel="noopener">进程</a>之中，是<a href="https://baike.baidu.com/item/进程" target="_blank" rel="noopener">进程</a></p><p>中的实际运作单位。</p></blockquote><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sing'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dance'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># target 需要的是一个函数，用来指定线程需要执行的任务</span>t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>dance<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建了线程1</span>t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sing<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建了线程2</span><span class="token comment" spellcheck="true"># 启动线程</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="多个线程可以共用一个全局变量"><a href="#多个线程可以共用一个全局变量" class="headerlink" title="多个线程可以共用一个全局变量"></a>多个线程可以共用一个全局变量</h3><ul><li>全局解释器锁</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 定义全局变量 ticket</span>ticket<span class="token operator">=</span><span class="token number">20</span><span class="token comment" spellcheck="true"># 创建锁</span>lock<span class="token operator">=</span>threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sell_ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> ticket    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 加锁 阻止另外的线程进入 修改全局变量</span>        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            ticket<span class="token operator">-=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 事件完成之后开锁</span>            lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}卖出一张，剩{} 张'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>ticket<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'no ticket!'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token comment" spellcheck="true"># 创建两个线程</span>t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sell_ticket<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'线程1'</span><span class="token punctuation">)</span>t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sell_ticket<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'线程2'</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="线程之间进行通信"><a href="#线程之间进行通信" class="headerlink" title="线程之间进行通信"></a>线程之间进行通信</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> queue<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'生产了面包 '</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 生产者向队列中加入內容</span>        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>f<span class="token string">'break{i}'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># q.get() 方法是一个堵塞的方法</span>        <span class="token comment" spellcheck="true"># 消费者从队列中取到先放入的內容</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'买到了面包 {q.get()}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建队列  先进先出</span>q<span class="token operator">=</span>queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>p1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>produce<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'p1'</span><span class="token punctuation">)</span>c1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>customer<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'c1'</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li><p><code>ThreadPoolExecutor</code></p></li><li><p><code>url_list</code> 包含的是所有<code>down_ts</code> 里的列表</p></li><li><p>多用于耗时操作 <code>resquest</code>  <code>file IO</code>等</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>thread <span class="token keyword">import</span> ThreadPoolExecutor_ThreadPool_max_workers<span class="token operator">=</span><span class="token number">20</span>  <span class="token comment" spellcheck="true"># 启动的线程数20个线程</span>url_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span><span class="token string">'https://www.163.com'</span><span class="token punctuation">,</span><span class="token string">'https://www.qq.com'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">down_ts</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">multi_threaded_download</span><span class="token punctuation">(</span>url_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span>_ThreadPool_max_workers<span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>        executor<span class="token punctuation">.</span>map<span class="token punctuation">(</span>down_ts<span class="token punctuation">,</span> url_list<span class="token punctuation">)</span></code></pre><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><blockquote><p><strong>进程</strong>（<code>Process</code>）是计算机中的程序关于某数据集合上的一次运行活动，是<strong>系统</strong>进行资源<strong>分配</strong>和</p><p><strong>调度</strong>的基本单位</p></blockquote><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'dancing  pid={os.getpid()}'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">song</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'song  pid={os.getpid()}'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'主进程ID{os.getpid()}'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建了两个进程</span>    <span class="token comment" spellcheck="true"># target 用来表示执行的任务 args 有来传参 ，类型是一个元组</span>    p1<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>dance<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p2<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>song<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="多进程之间不能共享全局变量"><a href="#多进程之间不能共享全局变量" class="headerlink" title="多进程之间不能共享全局变量"></a>多进程之间不能共享全局变量</h3><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">produce</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'生产了++++++++++pid {os.getpid()}  {i}'</span><span class="token punctuation">)</span>        x<span class="token punctuation">.</span>put<span class="token punctuation">(</span>f<span class="token string">'pid {os.getpid()} {i}'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'消费了---------- {x.get()}'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    p1<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>produce<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    c2<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>consumer <span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    c2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><ul><li><code>ProcessPoolExecutor</code></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    t_start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{msg} 开始执行，进程ID {os.getpid()}'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token string">'执行完毕花费 {} s'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>t_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    _ProcessPool_max_workers<span class="token operator">=</span><span class="token number">3</span>    workers<span class="token operator">=</span>list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> ProcessPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span>_ProcessPool_max_workers<span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>            executor<span class="token punctuation">.</span>map<span class="token punctuation">(</span>worker<span class="token punctuation">,</span> workers<span class="token punctuation">)</span></code></pre><ul><li><h3 id="multiprocessing中的Pool-进程池"><a href="#multiprocessing中的Pool-进程池" class="headerlink" title="multiprocessing中的Pool 进程池"></a><code>multiprocessing</code>中的<code>Pool</code> 进程池</h3></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>pool <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    t_start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{msg} 开始执行，进程ID {os.getpid()}'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token string">'执行完毕花费 {} s'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>t_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool<span class="token operator">=</span>Pool<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Pool.apply_async(要调用的目标,(传递给目标的参数元组,))</span>        <span class="token comment" spellcheck="true"># 每次循环将会用空闲出来的子进程去调用目标</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>worker<span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># pool.map(worker,list(range(10)))  或者调用map函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------======start=====-----'</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 关闭进程池，关闭后pool不再接受新的请求</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 等待pool中的所有子进程完成，必须放在close语句后 给主进程让步</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------======stop=====-----'</span><span class="token punctuation">)</span></code></pre><h2 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列 queue"></a>队列 <code>queue</code></h2><ul><li>进程间通信</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessingq<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建队列时可以指定最大的长度  默认值是0 表示不限长度</span>q<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 长度最多只有5个 够5个后就开始堵塞 直到取出队列中的元素才可以放入元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>full<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 判断队列是否满了</span><span class="token comment" spellcheck="true"># 往队列里放了 'how'  block=True 表示是堵塞的，如果队列满了就进行等待</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'how'</span><span class="token punctuation">,</span>block<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 不进行等待</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span>block<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>time<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># block=True 表示是堵塞的，如果队列满了就进行等待</span></code></pre><ul><li>线程间通信</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> queueq<span class="token operator">=</span>queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="二者之间的关系与联系"><a href="#二者之间的关系与联系" class="headerlink" title="二者之间的关系与联系"></a>二者之间的关系与联系</h2><blockquote><p>同一进程之间的不同线程可以共享全局变量</p><p>不同进程之间不能共享全局变量</p><p>一个程序里至少要有一个主进程，一个主进程里至少有一个主线程</p></blockquote><h2 id="多线程与多进程的使用"><a href="#多线程与多进程的使用" class="headerlink" title="多线程与多进程的使用"></a>多线程与多进程的使用</h2><blockquote><p><code>Python</code>底层只要使用线程默认加锁</p><p>在多个<code>CPU</code>进行切换时　由于<code>GIL</code>(全局解释器锁的存在)　多进程的效率高于多线程</p><p>在<code>request</code>发送请求时需要耗时　可使用多个线程提高程序的效率</p><p>在需要进行大量的<code>IO</code>读写时使用多线程</p><p>在进行大量的计算时使用多进程</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
