<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>centos7安装pycharm2020.2专业版</title>
      <link href="/2020/08/10/centos7%E5%AE%89%E8%A3%85pycharm2020-2%E4%B8%93%E4%B8%9A%E7%89%88/"/>
      <url>/2020/08/10/centos7%E5%AE%89%E8%A3%85pycharm2020-2%E4%B8%93%E4%B8%9A%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h2 id="下载pycharm软件包"><a href="#下载pycharm软件包" class="headerlink" title="下载pycharm软件包"></a>下载pycharm软件包</h2><p>  <strong>网页下载：</strong><a href="http://www.jetbrains.com/pycharm/download/#section=linux" target="_blank" rel="noopener">http://www.jetbrains.com/pycharm/download/#section=linux</a></p><p>  <strong>wget直接下载：</strong>wget <a href="https://download-cf.jetbrains.com/python/pycharm-professional-2020.2.tar.gz" target="_blank" rel="noopener">https://download-cf.jetbrains.com/python/pycharm-professional-2020.2.tar.gz</a></p><h2 id="解压软件包"><a href="#解压软件包" class="headerlink" title="解压软件包"></a>解压软件包</h2><pre class=" language-sh"><code class="language-sh"> tar -xf pycharm-professional-2020.2.tar.gz</code></pre><h2 id="进入解压后的bin目录执行安装命令"><a href="#进入解压后的bin目录执行安装命令" class="headerlink" title="进入解压后的bin目录执行安装命令"></a>进入解压后的bin目录执行安装命令</h2><pre class=" language-sh"><code class="language-sh">cd pycharm-2020.2/bin</code></pre><ul><li>记住这个目录 在 创建应用程序列表 及 快捷方式 需要使用</li></ul><pre class=" language-sh"><code class="language-sh">pwd   # 查看当前目录</code></pre><h2 id="执行安装命令"><a href="#执行安装命令" class="headerlink" title="执行安装命令"></a>执行安装命令</h2><pre class=" language-sh"><code class="language-sh">./pycharm.sh </code></pre><blockquote><p>该命令需要在图形模式才可以执行否则报错</p><p>关于Centos安装图形化界面请参考我的上一篇文章  <strong>Centos安装图像化界面</strong></p></blockquote><h2 id="进入到激活页面-激活方式请自行谷歌"><a href="#进入到激活页面-激活方式请自行谷歌" class="headerlink" title="进入到激活页面 激活方式请自行谷歌"></a>进入到激活页面 激活方式请自行谷歌</h2><h2 id="给pycharm-sh加入应用程序列表，并创建快捷方式"><a href="#给pycharm-sh加入应用程序列表，并创建快捷方式" class="headerlink" title="给pycharm.sh加入应用程序列表，并创建快捷方式"></a>给pycharm.sh加入应用程序列表，并创建快捷方式</h2><pre class=" language-sh"><code class="language-sh">vim /usr/share/applications/pycharm.desktop</code></pre><ul><li>写入如下內容</li></ul><pre><code>#!/usr/bin/env xdg-open[Desktop Entry]Encoding=UTF-8Name=PycharmComment=pycharm-2020.2   # 填入你的版本  eg:  pycharm-2020.2  pycharm-2018.1.1Exec=/root/pycharm-2020.2/bin/pycharm.sh    # /root/pycharm-2020.2/bin 这里写入你自己在第三步记住的目录Icon=/root/pycharm-2020.2/bin/pycharm.png    # /root/pycharm-2020.2/bin 这里写入你自己在第三步记住的目录Terminal=falseStartupNotify=trueType=ApplicationCategories=Application;</code></pre><ul><li>给文件添加可执行权限</li></ul><pre class=" language-sh"><code class="language-sh">chmod a+x /usr/share/applications/pycharm.desktop</code></pre><p>现在可以在应用程序列表找到<code>pycharm</code>了</p><p><img src="pycharm.png" alt=""></p><h2 id="创建桌面快捷方式"><a href="#创建桌面快捷方式" class="headerlink" title="创建桌面快捷方式"></a>创建桌面快捷方式</h2><pre><code>cp  /usr/share/applications/pycharm.desktop /root/桌面</code></pre><p><img src="okk.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADB命令大全</title>
      <link href="/2020/08/04/ADB%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2020/08/04/ADB%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="速查-ADB-用法大全"><a href="#速查-ADB-用法大全" class="headerlink" title="速查 | ADB 用法大全"></a>速查 | ADB 用法大全</h1><h1 id=""><a href="#" class="headerlink" title=""></a><img src="ADB.png" alt=""></h1><p>ADB，即 <a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">Android Debug Bridge</a>，它是 Android 开发/测试人员不可替代的强大工具，也是 Android 设备玩家的好玩具。</p><p><strong>注：</strong> 有部分命令的支持情况可能与 Android 系统版本及定制 ROM 的实现有关。</p><h1 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="bar.png" alt=""></h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="命令语法"><a href="#命令语法" class="headerlink" title="命令语法"></a>命令语法</h3><p>adb 命令的基本语法如下：</p><pre class=" language-sh"><code class="language-sh">adb [-d|-e|-s <serialNumber>] <command></code></pre><p>如果只有一个设备/模拟器连接时，可以省略掉 <code>[-d|-e|-s ]</code> 这一部分，直接使用 <code>adb</code>。</p><h3 id="为命令指定目标设备"><a href="#为命令指定目标设备" class="headerlink" title="为命令指定目标设备"></a>为命令指定目标设备</h3><p>如果有多个设备/模拟器连接，则需要为命令指定目标设备。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>指定当前唯一通过 USB 连接的 Android 设备为命令目标</td></tr><tr><td>-e</td><td>指定当前唯一运行的模拟器为命令目标</td></tr><tr><td><code>-s</code></td><td>指定相应 serialNumber 号的设备/模拟器为命令目标</td></tr></tbody></table><p>在多个设备/模拟器连接的情况下较常用的是 <code>-s</code> 参数，serialNumber 可以通过 <code>adb devices</code> 命令获取。如：</p><pre class=" language-sh"><code class="language-sh">$ adb devicesList of devices attachedcf264b8f    deviceemulator-5554    device10.129.164.6:5555    device</code></pre><p>输出里的 <code>cf264b8f</code>、<code>emulator-5554</code> 和 <code>10.129.164.6:5555</code> 即为 serialNumber。</p><p>比如这时想指定 <code>cf264b8f</code> 这个设备来运行 adb 命令获取屏幕分辨率：</p><pre class=" language-sh"><code class="language-sh">adb -s cf264b8f shell wm size</code></pre><p>又如想给 <code>10.129.164.6:5555</code> 这个设备安装应用（<em>这种形式的 serialNumber 格式为 <code>:</code>，一般为无线连接的设备或 Genymotion 等第三方 Android 模拟器</em>）：</p><pre class=" language-sh"><code class="language-sh">adb -s 10.129.164.6:5555 install test.apk</code></pre><p><strong>遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。</strong></p><h3 id="启动-停止"><a href="#启动-停止" class="headerlink" title="启动/停止"></a>启动/停止</h3><p>启动 adb server 命令：</p><pre class=" language-sh"><code class="language-sh">adb start-server</code></pre><p>（一般无需手动执行此命令，在运行 adb 命令时若发现 adb server 没有启动会自动调起。）</p><p>停止 adb server 命令：</p><pre class=" language-sh"><code class="language-sh">adb kill-server</code></pre><h3 id="查看-adb-版本"><a href="#查看-adb-版本" class="headerlink" title="查看 adb 版本"></a>查看 adb 版本</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb version</code></pre><p>示例输出：</p><pre class=" language-sh"><code class="language-sh">Android Debug Bridge version 1.0.36Revision 8f855a3d9b35-android</code></pre><h3 id="以-root-权限运行-adbd"><a href="#以-root-权限运行-adbd" class="headerlink" title="以 root 权限运行 adbd"></a>以 root 权限运行 adbd</h3><p>adb 的运行原理是 PC 端的 adb server 与手机端的守护进程 adbd 建立连接，然后 PC 端的 adb client 通过 adb server 转发命令，adbd 接收命令后解析运行。</p><p>所以如果 adbd 以普通权限执行，有些需要 root 权限才能执行的命令无法直接用 <code>adb xxx</code> 执行。这时可以 <code>adb shell</code> 然后 <code>su</code> 后执行命令，也可以让 adbd 以 root 权限执行，这个就能随意执行高权限命令了。</p><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb root</code></pre><p>正常输出：</p><pre class=" language-sh"><code class="language-sh">restarting adbd as root</code></pre><p>现在再运行 <code>adb shell</code>，看看命令行提示符是不是变成 <code>#</code> 了？</p><p>有些手机 root 后也无法通过 <code>adb root</code> 命令让 adbd 以 root 权限执行，比如三星的部分机型，会提示 <code>adbd cannot run as root in production builds</code>，此时可以先安装 adbd Insecure，然后 <code>adb root</code> 试试。</p><p>相应地，如果要恢复 adbd 为非 root 权限的话，可以使用 <code>adb unroot</code> 命令。</p><h3 id="指定-adb-server-的网络端口"><a href="#指定-adb-server-的网络端口" class="headerlink" title="指定 adb server 的网络端口"></a>指定 adb server 的网络端口</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb -P <port> start-server</code></pre><p>默认端口为 5037。</p><h2 id="设备连接管理"><a href="#设备连接管理" class="headerlink" title="设备连接管理"></a>设备连接管理</h2><h3 id="查询已连接设备-模拟器"><a href="#查询已连接设备-模拟器" class="headerlink" title="查询已连接设备/模拟器"></a>查询已连接设备/模拟器</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb devices</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">List of devices attachedcf264b8f    deviceemulator-5554    device10.129.164.6:5555    device</code></pre><p>输出格式为 <code>[serialNumber] [state]</code>，serialNumber 即我们常说的 SN，state 有如下几种：</p><ul><li><code>offline</code> —— 表示设备未连接成功或无响应。</li><li><code>device</code> —— 设备已连接。注意这个状态并不能标识 Android 系统已经完全启动和可操作，在设备启动过程中设备实例就可连接到 adb，但启动完毕后系统才处于可操作状态。</li><li><code>no device</code> —— 没有设备/模拟器连接。</li></ul><p>以上输出显示当前已经连接了三台设备/模拟器，<code>cf264b8f</code>、<code>emulator-5554</code> 和 <code>10.129.164.6:5555</code> 分别是它们的 SN。从 <code>emulator-5554</code> 这个名字可以看出它是一个 Android 模拟器，而 <code>10.129.164.6:5555</code> 这种形为 <code>:</code> 的 serialNumber 一般是无线连接的设备或 Genymotion 等第三方 Android 模拟器。</p><p>常见异常输出：</p><ol><li><p>没有设备/模拟器连接成功。</p><pre class=" language-sh"><code class="language-sh">List of devices attached</code></pre></li><li><p>设备/模拟器未连接到 adb 或无响应。</p><pre class=" language-sh"><code class="language-sh">List of devices attachedcf264b8f    offline</code></pre></li></ol><h3 id="USB-连接"><a href="#USB-连接" class="headerlink" title="USB 连接"></a>USB 连接</h3><p>通过 USB 连接来正常使用 adb 需要保证几点：</p><ol><li><p>硬件状态正常。</p><p>包括 Android 设备处于正常开机状态，USB 连接线和各种接口完好。</p></li><li><p>Android 设备的开发者选项和 USB 调试模式已开启。</p><p>可以到「设置」-「开发者选项」-「Android 调试」查看。</p><p>如果在设置里找不到开发者选项，那需要通过一个彩蛋来让它显示出来：在「设置」-「关于手机」连续点击「版本号」7 次。</p></li><li><p>设备驱动状态正常。</p><p>这一点貌似在 Linux 和 Mac OS X 下不用操心，在 Windows 下有可能遇到需要安装驱动的情况，确认这一点可以右键「计算机」-「属性」，到「设备管理器」里查看相关设备上是否有黄色感叹号或问号，如果没有就说明驱动状态已经好了。否则可以下载一个手机助手类程序来安装驱动先。</p></li><li><p>通过 USB 线连接好电脑和设备后确认状态。</p><pre class=" language-sh"><code class="language-sh">adb devices</code></pre><p>如果能看到</p><pre class=" language-sh"><code class="language-sh">xxxxxx device</code></pre><p>说明连接成功。</p></li></ol><h3 id="无线连接（需要借助-USB-线）"><a href="#无线连接（需要借助-USB-线）" class="headerlink" title="无线连接（需要借助 USB 线）"></a>无线连接（需要借助 USB 线）</h3><p>除了可以通过 USB 连接设备与电脑来使用 adb，也可以通过无线连接——虽然连接过程中也有需要使用 USB 的步骤，但是连接成功之后你的设备就可以在一定范围内摆脱 USB 连接线的限制啦！</p><p>操作步骤：</p><ol><li><p>将 Android 设备与要运行 adb 的电脑连接到同一个局域网，比如连到同一个 WiFi。</p></li><li><p>将设备与电脑通过 USB 线连接。</p><p>应确保连接成功（可运行 <code>adb devices</code> 看是否能列出该设备）。</p></li><li><p>让设备在 5555 端口监听 TCP/IP 连接：</p><pre class=" language-sh"><code class="language-sh">adb tcpip 5555</code></pre></li><li><p>断开 USB 连接。</p></li><li><p>找到设备的 IP 地址。</p><p>一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，也可以使用下文里 <a href="http://betteryjs.top/2020/08/04/ADB命令大全/#ip-地址">查看设备信息 - IP 地址</a> 一节里的方法用 adb 命令来查看。</p></li><li><p>通过 IP 地址连接设备。</p><pre class=" language-sh"><code class="language-sh">adb connect <device-ip-address></code></pre><p>这里的 <code>&lt;device-ip-address&gt;</code> 就是上一步中找到的设备 IP 地址。</p></li><li><p>确认连接状态。</p><pre class=" language-sh"><code class="language-sh">adb devices</code></pre><p>如果能看到</p><pre class=" language-sh"><code class="language-sh"><device-ip-address>:5555 device</code></pre><p>说明连接成功。</p></li></ol><p>如果连接不了，请确认 Android 设备与电脑是连接到了同一个 WiFi，然后再次执行 <code>adb connect</code> 那一步；</p><p>如果还是不行的话，通过 <code>adb kill-server</code> 重新启动 adb 然后从头再来一次试试。</p><p><strong>断开无线连接</strong></p><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb disconnect <device-ip-address></code></pre><h3 id="无线连接（无需借助-USB-线）"><a href="#无线连接（无需借助-USB-线）" class="headerlink" title="无线连接（无需借助 USB 线）"></a>无线连接（无需借助 USB 线）</h3><p><strong>注：需要 root 权限。</strong></p><p>上一节「无线连接（需要借助 USB 线）」是官方文档里介绍的方法，需要借助于 USB 数据线来实现无线连接。</p><p>既然我们想要实现无线连接，那能不能所有步骤下来都是无线的呢？答案是能的。</p><ol><li><p>在 Android 设备上安装一个终端模拟器。</p><p>已经安装过的设备可以跳过此步。我使用的终端模拟器下载地址是：<a href="https://jackpal.github.io/Android-Terminal-Emulator/" target="_blank" rel="noopener">Terminal Emulator for Android Downloads</a></p></li><li><p>将 Android 设备与要运行 adb 的电脑连接到同一个局域网，比如连到同一个 WiFi。</p></li><li><p>打开 Android 设备上的终端模拟器，在里面依次运行命令：</p><pre class=" language-sh"><code class="language-sh">susetprop service.adb.tcp.port 5555</code></pre></li><li><p>找到 Android 设备的 IP 地址。</p><p>一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，也可以使用下文里 <a href="https://www.wanandroid.com/blog/show/2310#ip-地址" target="_blank" rel="noopener">查看设备信息 - IP 地址</a> 一节里的方法用 adb 命令来查看。</p></li><li><p>在电脑上通过 adb 和 IP 地址连接 Android 设备。</p><pre class=" language-sh"><code class="language-sh">adb connect <device-ip-address></code></pre><p>这里的 <code>&lt;device-ip-address&gt;</code> 就是上一步中找到的设备 IP 地址。</p><p>如果能看到 <code>connected to &lt;device-ip-address&gt;:5555</code> 这样的输出则表示连接成功。</p></li></ol><p><em>节注一：</em></p><p>有的设备，比如小米 5S + MIUI 8.0 + Android 6.0.1 MXB48T，可能在第 5 步之前需要重启 adbd 服务，在设备的终端模拟器上运行：</p><pre class=" language-sh"><code class="language-sh">restart adbd</code></pre><p>如果 restart 无效，尝试以下命令：</p><pre class=" language-sh"><code class="language-sh">stop adbdstart adbd</code></pre><h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><h3 id="查看应用列表"><a href="#查看应用列表" class="headerlink" title="查看应用列表"></a>查看应用列表</h3><p>查看应用列表的基本命令格式是</p><pre class=" language-sh"><code class="language-sh">adb shell pm list packages [-f] [-d] [-e] [-s] [-3] [-i] [-u] [--user USER_ID] [FILTER]</code></pre><p>即在 <code>adb shell pm list packages</code> 的基础上可以加一些参数进行过滤查看不同的列表，支持的过滤参数如下：</p><table><thead><tr><th>参数</th><th>显示列表</th></tr></thead><tbody><tr><td>无</td><td>所有应用</td></tr><tr><td>-f</td><td>显示应用关联的 apk 文件</td></tr><tr><td>-d</td><td>只显示 disabled 的应用</td></tr><tr><td>-e</td><td>只显示 enabled 的应用</td></tr><tr><td>-s</td><td>只显示系统应用</td></tr><tr><td>-3</td><td>只显示第三方应用</td></tr><tr><td>-i</td><td>显示应用的 installer</td></tr><tr><td>-u</td><td>包含已卸载应用</td></tr><tr><td><code>&lt;FILTER&gt;</code></td><td>包名包含 <code>&lt;FILTER&gt;</code> 字符串</td></tr></tbody></table><h4 id="所有应用"><a href="#所有应用" class="headerlink" title="所有应用"></a>所有应用</h4><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell pm list packages</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">package:com.android.smoketestpackage:com.example.android.livecubespackage:com.android.providers.telephonypackage:com.google.android.googlequicksearchboxpackage:com.android.providers.calendarpackage:com.android.providers.mediapackage:com.android.protipspackage:com.android.documentsuipackage:com.android.gallerypackage:com.android.externalstorage...// other packages here...</code></pre><h4 id="系统应用"><a href="#系统应用" class="headerlink" title="系统应用"></a>系统应用</h4><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell pm list packages -s</code></pre><h4 id="第三方应用"><a href="#第三方应用" class="headerlink" title="第三方应用"></a>第三方应用</h4><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell pm list packages -3</code></pre><h4 id="包名包含某字符串的应用"><a href="#包名包含某字符串的应用" class="headerlink" title="包名包含某字符串的应用"></a>包名包含某字符串的应用</h4><p>比如要查看包名包含字符串 <code>mazhuang</code> 的应用列表，命令：</p><pre class=" language-sh"><code class="language-sh">adb shell pm list packages mazhuang</code></pre><p>当然也可以使用 grep 来过滤：</p><pre class=" language-sh"><code class="language-sh">adb shell pm list packages | grep mazhuang</code></pre><h3 id="安装-APK"><a href="#安装-APK" class="headerlink" title="安装 APK"></a>安装 APK</h3><p>命令格式：</p><pre class=" language-sh"><code class="language-sh">adb install [-lrtsdg] <path_to_apk></code></pre><p>参数：</p><p><code>adb install</code> 后面可以跟一些可选参数来控制安装 APK 的行为，可用参数及含义如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-l</td><td>将应用安装到保护目录 /mnt/asec</td></tr><tr><td>-r</td><td>允许覆盖安装</td></tr><tr><td>-t</td><td>允许安装 AndroidManifest.xml 里 application 指定 <code>android:testOnly=&quot;true&quot;</code> 的应用</td></tr><tr><td>-s</td><td>将应用安装到 sdcard</td></tr><tr><td>-d</td><td>允许降级覆盖安装</td></tr><tr><td>-g</td><td>授予所有运行时权限</td></tr></tbody></table><p>运行命令后如果见到类似如下输出（状态为 <code>Success</code>）代表安装成功：</p><pre class=" language-sh"><code class="language-sh">[100%] /data/local/tmp/1.apk    pkg: /data/local/tmp/1.apkSuccess</code></pre><p>上面是当前最新版 v1.0.36 的 adb 的输出，会显示 push apk 文件到手机的进度百分比。</p><p>使用旧版本 adb 的输出则是这样的：</p><pre class=" language-sh"><code class="language-sh">12040 KB/s (22205609 bytes in 1.801s)        pkg: /data/local/tmp/SogouInput_android_v8.3_sweb.apkSuccess</code></pre><p>而如果状态为 <code>Failure</code> 则表示安装失败，比如：</p><pre class=" language-sh"><code class="language-sh">[100%] /data/local/tmp/map-20160831.apk        pkg: /data/local/tmp/map-20160831.apkFailure [INSTALL_FAILED_ALREADY_EXISTS]</code></pre><p>常见安装失败输出代码、含义及可能的解决办法如下：</p><table><thead><tr><th>输出</th><th>含义</th><th>解决办法</th></tr></thead><tbody><tr><td>INSTALL_FAILED_ALREADY_EXISTS</td><td>应用已经存在，或卸载了但没卸载干净</td><td><code>adb install</code> 时使用 <code>-r</code> 参数，或者先 <code>adb uninstall</code> 再安装</td></tr><tr><td>INSTALL_FAILED_INVALID_APK</td><td>无效的 APK 文件</td><td></td></tr><tr><td>INSTALL_FAILED_INVALID_URI</td><td>无效的 APK 文件名</td><td>确保 APK 文件名里无中文</td></tr><tr><td>INSTALL_FAILED_INSUFFICIENT_STORAGE</td><td>空间不足</td><td>清理空间</td></tr><tr><td>INSTALL_FAILED_DUPLICATE_PACKAGE</td><td>已经存在同名程序</td><td></td></tr><tr><td>INSTALL_FAILED_NO_SHARED_USER</td><td>请求的共享用户不存在</td><td></td></tr><tr><td>INSTALL_FAILED_UPDATE_INCOMPATIBLE</td><td>以前安装过同名应用，但卸载时数据没有移除；或者已安装该应用，但签名不一致</td><td>先 <code>adb uninstall</code> 再安装</td></tr><tr><td>INSTALL_FAILED_SHARED_USER_INCOMPATIBLE</td><td>请求的共享用户存在但签名不一致</td><td></td></tr><tr><td>INSTALL_FAILED_MISSING_SHARED_LIBRARY</td><td>安装包使用了设备上不可用的共享库</td><td></td></tr><tr><td>INSTALL_FAILED_REPLACE_COULDNT_DELETE</td><td>替换时无法删除</td><td></td></tr><tr><td>INSTALL_FAILED_DEXOPT</td><td>dex 优化验证失败或空间不足</td><td></td></tr><tr><td>INSTALL_FAILED_OLDER_SDK</td><td>设备系统版本低于应用要求</td><td></td></tr><tr><td>INSTALL_FAILED_CONFLICTING_PROVIDER</td><td>设备里已经存在与应用里同名的 content provider</td><td></td></tr><tr><td>INSTALL_FAILED_NEWER_SDK</td><td>设备系统版本高于应用要求</td><td></td></tr><tr><td>INSTALL_FAILED_TEST_ONLY</td><td>应用是 test-only 的，但安装时没有指定 <code>-t</code> 参数</td><td></td></tr><tr><td>INSTALL_FAILED_CPU_ABI_INCOMPATIBLE</td><td>包含不兼容设备 CPU 应用程序二进制接口的 native code</td><td></td></tr><tr><td>INSTALL_FAILED_MISSING_FEATURE</td><td>应用使用了设备不可用的功能</td><td></td></tr><tr><td>INSTALL_FAILED_CONTAINER_ERROR</td><td>1. sdcard 访问失败; 2. 应用签名与 ROM 签名一致，被当作内置应用。</td><td>1. 确认 sdcard 可用，或者安装到内置存储; 2. 打包时不与 ROM 使用相同签名。</td></tr><tr><td>INSTALL_FAILED_INVALID_INSTALL_LOCATION</td><td>1. 不能安装到指定位置; 2. 应用签名与 ROM 签名一致，被当作内置应用。</td><td>1. 切换安装位置，添加或删除 <code>-s</code> 参数; 2. 打包时不与 ROM 使用相同签名。</td></tr><tr><td>INSTALL_FAILED_MEDIA_UNAVAILABLE</td><td>安装位置不可用</td><td>一般为 sdcard，确认 sdcard 可用或安装到内置存储</td></tr><tr><td>INSTALL_FAILED_VERIFICATION_TIMEOUT</td><td>验证安装包超时</td><td></td></tr><tr><td>INSTALL_FAILED_VERIFICATION_FAILURE</td><td>验证安装包失败</td><td></td></tr><tr><td>INSTALL_FAILED_PACKAGE_CHANGED</td><td>应用与调用程序期望的不一致</td><td></td></tr><tr><td>INSTALL_FAILED_UID_CHANGED</td><td>以前安装过该应用，与本次分配的 UID 不一致</td><td>清除以前安装过的残留文件</td></tr><tr><td>INSTALL_FAILED_VERSION_DOWNGRADE</td><td>已经安装了该应用更高版本</td><td>使用 <code>-d</code> 参数</td></tr><tr><td>INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE</td><td>已安装 target SDK 支持运行时权限的同名应用，要安装的版本不支持运行时权限</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_NOT_APK</td><td>指定路径不是文件，或不是以 <code>.apk</code> 结尾</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_BAD_MANIFEST</td><td>无法解析的 AndroidManifest.xml 文件</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION</td><td>解析器遇到异常</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_NO_CERTIFICATES</td><td>安装包没有签名</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES</td><td>已安装该应用，且签名与 APK 文件不一致</td><td>先卸载设备上的该应用，再安装</td></tr><tr><td>INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING</td><td>解析 APK 文件时遇到 <code>CertificateEncodingException</code></td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME</td><td>manifest 文件里没有或者使用了无效的包名</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID</td><td>manifest 文件里指定了无效的共享用户 ID</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</td><td>解析 manifest 文件时遇到结构性错误</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_MANIFEST_EMPTY</td><td>在 manifest 文件里找不到找可操作标签（instrumentation 或 application）</td><td></td></tr><tr><td>INSTALL_FAILED_INTERNAL_ERROR</td><td>因系统问题安装失败</td><td></td></tr><tr><td>INSTALL_FAILED_USER_RESTRICTED</td><td>用户被限制安装应用</td><td></td></tr><tr><td>INSTALL_FAILED_DUPLICATE_PERMISSION</td><td>应用尝试定义一个已经存在的权限名称</td><td></td></tr><tr><td>INSTALL_FAILED_NO_MATCHING_ABIS</td><td>应用包含设备的应用程序二进制接口不支持的 native code</td><td></td></tr><tr><td>INSTALL_CANCELED_BY_USER</td><td>应用安装需要在设备上确认，但未操作设备或点了取消</td><td>在设备上同意安装</td></tr><tr><td>INSTALL_FAILED_ACWF_INCOMPATIBLE</td><td>应用程序与设备不兼容</td><td></td></tr><tr><td>INSTALL_FAILED_TEST_ONLY</td><td>APK 文件是使用 Android Studio 直接 RUN 编译出来的文件</td><td>通过 Gradle 的 assembleDebug 或 assembleRelease 重新编译，或者 Generate Signed APK</td></tr><tr><td>does not contain AndroidManifest.xml</td><td>无效的 APK 文件</td><td></td></tr><tr><td>is not a valid zip file</td><td>无效的 APK 文件</td><td></td></tr><tr><td>Offline</td><td>设备未连接成功</td><td>先将设备与 adb 连接成功</td></tr><tr><td>unauthorized</td><td>设备未授权允许调试</td><td></td></tr><tr><td>error: device not found</td><td>没有连接成功的设备</td><td>先将设备与 adb 连接成功</td></tr><tr><td>protocol failure</td><td>设备已断开连接</td><td>先将设备与 adb 连接成功</td></tr><tr><td>Unknown option: -s</td><td>Android 2.2 以下不支持安装到 sdcard</td><td>不使用 <code>-s</code> 参数</td></tr><tr><td>No space left on device</td><td>空间不足</td><td>清理空间</td></tr><tr><td>Permission denied … sdcard …</td><td>sdcard 不可用</td><td></td></tr><tr><td>signatures do not match the previously installed version; ignoring!</td><td>已安装该应用且签名不一致</td><td>先卸载设备上的该应用，再安装</td></tr></tbody></table><p>参考：<a href="https://github.com/android/platform_frameworks_base/blob/master/core%2Fjava%2Fandroid%2Fcontent%2Fpm%2FPackageManager.java" target="_blank" rel="noopener">PackageManager.java</a></p><p><em><code>adb install</code> 内部原理简介</em></p><p><code>adb install</code> 实际是分三步完成：</p><ol><li>push apk 文件到 /data/local/tmp。</li><li>调用 pm install 安装。</li><li>删除 /data/local/tmp 下的对应 apk 文件。</li></ol><p>所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。</p><h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb uninstall [-k] <packagename></code></pre><p><code>&lt;packagename&gt;</code>表示应用的包名，<code>-k</code> 参数可选，表示卸载应用但保留数据和缓存目录。</p><p>命令示例：</p><pre class=" language-sh"><code class="language-sh">adb uninstall com.qihoo360.mobilesafe</code></pre><p>表示卸载 360 手机卫士。</p><h3 id="清除应用数据与缓存"><a href="#清除应用数据与缓存" class="headerlink" title="清除应用数据与缓存"></a>清除应用数据与缓存</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell pm clear <packagename></code></pre><p><code>&lt;packagename&gt;</code> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。</p><p>命令示例：</p><pre class=" language-sh"><code class="language-sh">adb shell pm clear com.qihoo360.mobilesafe</code></pre><p>表示清除 360 手机卫士的数据和缓存。</p><h3 id="查看前台-Activity"><a href="#查看前台-Activity" class="headerlink" title="查看前台 Activity"></a>查看前台 Activity</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell dumpsys activity activities | grep mFocusedActivity</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">mFocusedActivity: ActivityRecord{8079d7e u0 com.cyanogenmod.trebuchet/com.android.launcher3.Launcher t42}</code></pre><p>其中的 <code>com.cyanogenmod.trebuchet/com.android.launcher3.Launcher</code> 就是当前处于前台的 Activity。</p><h3 id="查看正在运行的-Services"><a href="#查看正在运行的-Services" class="headerlink" title="查看正在运行的 Services"></a>查看正在运行的 Services</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell dumpsys activity services [<packagename>]</code></pre><p><code>&lt;packagename&gt;</code> 参数不是必须的，指定 <code>&lt;packagename&gt;</code> 表示查看与某个包名相关的 Services，不指定表示查看所有 Services。</p><p><code>&lt;packagename&gt;</code> 不一定要给出完整的包名，比如运行 <code>adb shell dumpsys activity services org.mazhuang</code>，那么包名 <code>org.mazhuang.demo1</code>、<code>org.mazhuang.demo2</code> 和 <code>org.mazhuang123</code> 等相关的 Services 都会列出来。</p><h3 id="查看应用详细信息"><a href="#查看应用详细信息" class="headerlink" title="查看应用详细信息"></a>查看应用详细信息</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell dumpsys package <packagename></code></pre><p>输出中包含很多信息，包括 Activity Resolver Table、Registered ContentProviders、包名、userId、安装后的文件资源代码等路径、版本信息、权限信息和授予状态、签名版本信息等。</p><p><code>&lt;packagename&gt;</code> 表示应用包名。</p><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">Activity Resolver Table:  Non-Data Actions:      android.intent.action.MAIN:        5b4cba8 org.mazhuang.guanggoo/.SplashActivity filter 5ec9dcc          Action: "android.intent.action.MAIN"          Category: "android.intent.category.LAUNCHER"          AutoVerify=falseRegistered ContentProviders:  org.mazhuang.guanggoo/com.tencent.bugly.beta.utils.BuglyFileProvider:    Provider{7a3c394 org.mazhuang.guanggoo/com.tencent.bugly.beta.utils.BuglyFileProvider}ContentProvider Authorities:  [org.mazhuang.guanggoo.fileProvider]:    Provider{7a3c394 org.mazhuang.guanggoo/com.tencent.bugly.beta.utils.BuglyFileProvider}      applicationInfo=ApplicationInfo{7754242 org.mazhuang.guanggoo}Key Set Manager:  [org.mazhuang.guanggoo]      Signing KeySets: 501Packages:  Package [org.mazhuang.guanggoo] (c1d7f):    userId=10394    pkg=Package{55f714c org.mazhuang.guanggoo}    codePath=/data/app/org.mazhuang.guanggoo-2    resourcePath=/data/app/org.mazhuang.guanggoo-2    legacyNativeLibraryDir=/data/app/org.mazhuang.guanggoo-2/lib    primaryCpuAbi=null    secondaryCpuAbi=null    versionCode=74 minSdk=15 targetSdk=25    versionName=1.1.74    splits=[base]    apkSigningVersion=2    applicationInfo=ApplicationInfo{7754242 org.mazhuang.guanggoo}    flags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]    privateFlags=[ RESIZEABLE_ACTIVITIES ]    dataDir=/data/user/0/org.mazhuang.guanggoo    supportsScreens=[small, medium, large, xlarge, resizeable, anyDensity]    timeStamp=2017-10-22 23:50:53    firstInstallTime=2017-10-22 23:50:25    lastUpdateTime=2017-10-22 23:50:55    installerPackageName=com.miui.packageinstaller    signatures=PackageSignatures{af09595 [53c7caa2]}    installPermissionsFixed=true installStatus=1    pkgFlags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]    requested permissions:      android.permission.READ_PHONE_STATE      android.permission.INTERNET      android.permission.ACCESS_NETWORK_STATE      android.permission.ACCESS_WIFI_STATE      android.permission.READ_LOGS      android.permission.WRITE_EXTERNAL_STORAGE      android.permission.READ_EXTERNAL_STORAGE    install permissions:      android.permission.INTERNET: granted=true      android.permission.ACCESS_NETWORK_STATE: granted=true      android.permission.ACCESS_WIFI_STATE: granted=true    User 0: ceDataInode=1155675 installed=true hidden=false suspended=false stopped=true notLaunched=false enabled=0      gids=[3003]      runtime permissions:        android.permission.READ_EXTERNAL_STORAGE: granted=true        android.permission.READ_PHONE_STATE: granted=true        android.permission.WRITE_EXTERNAL_STORAGE: granted=true    User 999: ceDataInode=0 installed=false hidden=false suspended=false stopped=true notLaunched=true enabled=0      gids=[3003]      runtime permissions:Dexopt state:  [org.mazhuang.guanggoo]    Instruction Set: arm64      path: /data/app/org.mazhuang.guanggoo-2/base.apk      status: /data/app/org.mazhuang.guanggoo-2/oat/arm64/base.odex [compilation_filter=speed-profile, status=kOatUpToDa      te]</code></pre><h3 id="查看应用安装路径"><a href="#查看应用安装路径" class="headerlink" title="查看应用安装路径"></a>查看应用安装路径</h3><p>命令:</p><pre><code>adb shell pm path &lt;PACKAGE&gt;</code></pre><p>输出应用安装路径</p><p>输出示例:</p><pre><code>adb shell pm path ecarx.weatherpackage:/data/app/ecarx.weather-1.apk</code></pre><h2 id="与应用交互"><a href="#与应用交互" class="headerlink" title="与应用交互"></a>与应用交互</h2><p>主要是使用 <code>am &lt;command&gt;</code> 命令，常用的 <code>&lt;command&gt;</code> 如下：</p><table><thead><tr><th>command</th><th>用途</th></tr></thead><tbody><tr><td><code>start [options]</code></td><td>启动 <code>&lt;INTENT&gt;</code> 指定的 Activity</td></tr><tr><td><code>startservice [options]</code></td><td>启动 <code>&lt;INTENT&gt;</code> 指定的 Service</td></tr><tr><td><code>broadcast [options]</code></td><td>发送 <code>&lt;INTENT&gt;</code> 指定的广播</td></tr><tr><td><code>force-stop</code></td><td>停止 <code>&lt;packagename&gt;</code> 相关的进程</td></tr></tbody></table><p><code>&lt;INTENT&gt;</code> 参数很灵活，和写 Android 程序时代码里的 Intent 相对应。</p><p>用于决定 intent 对象的选项如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-a</code></td><td>指定 action，比如 <code>android.intent.action.VIEW</code></td></tr><tr><td><code>-c</code></td><td>指定 category，比如 <code>android.intent.category.APP_CONTACTS</code></td></tr><tr><td><code>-n</code></td><td>指定完整 component 名，用于明确指定启动哪个 Activity，如 <code>com.example.app/.ExampleActivity</code></td></tr></tbody></table><p><code>&lt;INTENT&gt;</code> 里还能带数据，就像写代码时的 Bundle 一样：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>--esn &lt;EXTRA_KEY&gt;</code></td><td>null 值（只有 key 名）</td></tr><tr><td>`-e</td><td>–es <EXTRA_KEY> <EXTRA_STRING_VALUE>  `</td></tr><tr><td><code>--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt;</code></td><td>boolean 值</td></tr><tr><td><code>--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;</code></td><td>integer 值</td></tr><tr><td><code>--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;</code></td><td>long 值</td></tr><tr><td><code>--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;</code></td><td>float 值</td></tr><tr><td><code>--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt;</code></td><td>URI</td></tr><tr><td><code>--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;</code></td><td>component name</td></tr><tr><td><code>--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]</code></td><td>integer 数组</td></tr><tr><td><code>--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]</code></td><td>long 数组</td></tr></tbody></table><h3 id="启动应用-调起-Activity"><a href="#启动应用-调起-Activity" class="headerlink" title="启动应用/ 调起 Activity"></a>启动应用/ 调起 Activity</h3><p>命令格式：</p><pre class=" language-sh"><code class="language-sh">adb shell am start [options] <INTENT></code></pre><p>例如：</p><pre class=" language-sh"><code class="language-sh">adb shell am start -n com.tencent.mm/.ui.LauncherUI</code></pre><p>表示调起微信主界面。</p><pre class=" language-sh"><code class="language-sh">adb shell am start -n org.mazhuang.boottimemeasure/.MainActivity --es "toast" "hello, world"</code></pre><p>表示调起 <code>org.mazhuang.boottimemeasure/.MainActivity</code> 并传给它 string 数据键值对 <code>toast - hello, world</code>。</p><h3 id="调起-Service"><a href="#调起-Service" class="headerlink" title="调起 Service"></a>调起 Service</h3><p>命令格式：</p><pre class=" language-sh"><code class="language-sh">adb shell am startservice [options] <INTENT></code></pre><p>例如：</p><pre class=" language-sh"><code class="language-sh">adb shell am startservice -n com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService</code></pre><p>表示调起微信的某 Service。</p><p>另外一个典型的用例是如果设备上原本应该显示虚拟按键但是没有显示，可以试试这个：</p><pre class=" language-sh"><code class="language-sh">adb shell am startservice -n com.android.systemui/.SystemUIService</code></pre><h3 id="停止-Service"><a href="#停止-Service" class="headerlink" title="停止 Service"></a>停止 Service</h3><p>命令格式：</p><pre class=" language-sh"><code class="language-sh">adb shell am stopservice [options] <INTENT></code></pre><h3 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h3><p>命令格式：</p><pre class=" language-sh"><code class="language-sh">adb shell am broadcast [options] <INTENT></code></pre><p>可以向所有组件广播，也可以只向指定组件广播。</p><p>例如，向所有组件广播 <code>BOOT_COMPLETED</code>：</p><pre class=" language-sh"><code class="language-sh">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED</code></pre><p>又例如，只向 <code>org.mazhuang.boottimemeasure/.BootCompletedReceiver</code> 广播 <code>BOOT_COMPLETED</code>：</p><pre class=" language-sh"><code class="language-sh">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED -n org.mazhuang.boottimemeasure/.BootCompletedReceiver</code></pre><p>这类用法在测试的时候很实用，比如某个广播的场景很难制造，可以考虑通过这种方式来发送广播。</p><p>既能发送系统预定义的广播，也能发送自定义广播。如下是部分系统预定义广播及正常触发时机：</p><table><thead><tr><th>action</th><th>触发时机</th></tr></thead><tbody><tr><td>android.net.conn.CONNECTIVITY_CHANGE</td><td>网络连接发生变化</td></tr><tr><td>android.intent.action.SCREEN_ON</td><td>屏幕点亮</td></tr><tr><td>android.intent.action.SCREEN_OFF</td><td>屏幕熄灭</td></tr><tr><td>android.intent.action.BATTERY_LOW</td><td>电量低，会弹出电量低提示框</td></tr><tr><td>android.intent.action.BATTERY_OKAY</td><td>电量恢复了</td></tr><tr><td>android.intent.action.BOOT_COMPLETED</td><td>设备启动完毕</td></tr><tr><td>android.intent.action.DEVICE_STORAGE_LOW</td><td>存储空间过低</td></tr><tr><td>android.intent.action.DEVICE_STORAGE_OK</td><td>存储空间恢复</td></tr><tr><td>android.intent.action.PACKAGE_ADDED</td><td>安装了新的应用</td></tr><tr><td>android.net.wifi.STATE_CHANGE</td><td>WiFi 连接状态发生变化</td></tr><tr><td>android.net.wifi.WIFI_STATE_CHANGED</td><td>WiFi 状态变为启用/关闭/正在启动/正在关闭/未知</td></tr><tr><td>android.intent.action.BATTERY_CHANGED</td><td>电池电量发生变化</td></tr><tr><td>android.intent.action.INPUT_METHOD_CHANGED</td><td>系统输入法发生变化</td></tr><tr><td>android.intent.action.ACTION_POWER_CONNECTED</td><td>外部电源连接</td></tr><tr><td>android.intent.action.ACTION_POWER_DISCONNECTED</td><td>外部电源断开连接</td></tr><tr><td>android.intent.action.DREAMING_STARTED</td><td>系统开始休眠</td></tr><tr><td>android.intent.action.DREAMING_STOPPED</td><td>系统停止休眠</td></tr><tr><td>android.intent.action.WALLPAPER_CHANGED</td><td>壁纸发生变化</td></tr><tr><td>android.intent.action.HEADSET_PLUG</td><td>插入耳机</td></tr><tr><td>android.intent.action.MEDIA_UNMOUNTED</td><td>卸载外部介质</td></tr><tr><td>android.intent.action.MEDIA_MOUNTED</td><td>挂载外部介质</td></tr><tr><td>android.os.action.POWER_SAVE_MODE_CHANGED</td><td>省电模式开启</td></tr></tbody></table><p><em>（以上广播均可使用 adb 触发）</em></p><h3 id="强制停止应用"><a href="#强制停止应用" class="headerlink" title="强制停止应用"></a>强制停止应用</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell am force-stop <packagename></code></pre><p>命令示例：</p><pre class=" language-sh"><code class="language-sh">adb shell am force-stop com.qihoo360.mobilesafe</code></pre><p>表示停止 360 安全卫士的一切进程与服务。</p><h3 id="收紧内存"><a href="#收紧内存" class="headerlink" title="收紧内存"></a>收紧内存</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell am send-trim-memory  <pid> <level></code></pre><p>pid: 进程 ID<br>level:<br>HIDDEN、RUNNING_MODERATE、BACKGROUND、<br>RUNNING_LOW、MODERATE、RUNNING_CRITICAL、COMPLETE</p><p>命令示例：</p><pre class=" language-sh"><code class="language-sh">adb shell am send-trim-memory 12345 RUNNING_LOW</code></pre><p>表示向 pid=12345 的进程，发出 level=RUNNING_LOW 的收紧内存命令。</p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="复制设备里的文件到电脑"><a href="#复制设备里的文件到电脑" class="headerlink" title="复制设备里的文件到电脑"></a>复制设备里的文件到电脑</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb pull <设备里的文件路径> [电脑上的目录]</code></pre><p>其中 <code>电脑上的目录</code> 参数可以省略，默认复制到当前目录。</p><p>例：</p><pre class=" language-sh"><code class="language-sh">adb pull /sdcard/sr.mp4 ~/tmp/</code></pre><p><em>小技巧：</em>设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 <code>adb shell</code> 和 <code>su</code> 命令在 adb shell 里获取 root 权限后，先 <code>cp /path/on/device /sdcard/filename</code> 将文件复制到 sdcard，然后 <code>adb pull /sdcard/filename /path/on/pc</code>。</p><h3 id="复制电脑里的文件到设备"><a href="#复制电脑里的文件到设备" class="headerlink" title="复制电脑里的文件到设备"></a>复制电脑里的文件到设备</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb push <电脑上的文件路径> <设备里的目录></code></pre><p>例：</p><pre class=" language-sh"><code class="language-sh">adb push ~/sr.mp4 /sdcard/</code></pre><p><em>小技巧：</em>设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 <code>adb push /path/on/pc /sdcard/filename</code>，然后 <code>adb shell</code> 和 <code>su</code> 在 adb shell 里获取 root 权限后，<code>cp /sdcard/filename /path/on/device</code>。</p><h2 id="模拟按键-输入"><a href="#模拟按键-输入" class="headerlink" title="模拟按键/输入"></a>模拟按键/输入</h2><p>在 <code>adb shell</code> 里有个很实用的命令叫 <code>input</code>，通过它可以做一些有趣的事情。</p><p><code>input</code> 命令的完整 help 信息如下：</p><pre class=" language-sh"><code class="language-sh">Usage: input [<source>] <command> [<arg>...]The sources are:      mouse      keyboard      joystick      touchnavigation      touchpad      trackball      stylus      dpad      gesture      touchscreen      gamepadThe commands and default sources are:      text <string> (Default: touchscreen)      keyevent [--longpress] <key code number or name> ... (Default: keyboard)      tap <x> <y> (Default: touchscreen)      swipe <x1> <y1> <x2> <y2> [duration(ms)] (Default: touchscreen)      press (Default: trackball)      roll <dx> <dy> (Default: trackball)</code></pre><p>比如使用 <code>adb shell input keyevent</code> 命令，不同的 keycode 能实现不同的功能，完整的 keycode 列表详见 <a href="https://developer.android.com/reference/android/view/KeyEvent.html" target="_blank" rel="noopener">KeyEvent</a>，摘引部分我觉得有意思的如下：</p><table><thead><tr><th>keycode</th><th>含义</th></tr></thead><tbody><tr><td>3</td><td>HOME 键</td></tr><tr><td>4</td><td>返回键</td></tr><tr><td>5</td><td>打开拨号应用</td></tr><tr><td>6</td><td>挂断电话</td></tr><tr><td>24</td><td>增加音量</td></tr><tr><td>25</td><td>降低音量</td></tr><tr><td>26</td><td>电源键</td></tr><tr><td>27</td><td>拍照（需要在相机应用里）</td></tr><tr><td>64</td><td>打开浏览器</td></tr><tr><td>82</td><td>菜单键</td></tr><tr><td>85</td><td>播放/暂停</td></tr><tr><td>86</td><td>停止播放</td></tr><tr><td>87</td><td>播放下一首</td></tr><tr><td>88</td><td>播放上一首</td></tr><tr><td>122</td><td>移动光标到行首或列表顶部</td></tr><tr><td>123</td><td>移动光标到行末或列表底部</td></tr><tr><td>126</td><td>恢复播放</td></tr><tr><td>127</td><td>暂停播放</td></tr><tr><td>164</td><td>静音</td></tr><tr><td>176</td><td>打开系统设置</td></tr><tr><td>187</td><td>切换应用</td></tr><tr><td>207</td><td>打开联系人</td></tr><tr><td>208</td><td>打开日历</td></tr><tr><td>209</td><td>打开音乐</td></tr><tr><td>210</td><td>打开计算器</td></tr><tr><td>220</td><td>降低屏幕亮度</td></tr><tr><td>221</td><td>提高屏幕亮度</td></tr><tr><td>223</td><td>系统休眠</td></tr><tr><td>224</td><td>点亮屏幕</td></tr><tr><td>231</td><td>打开语音助手</td></tr><tr><td>276</td><td>如果没有 wakelock 则让系统休眠</td></tr></tbody></table><p>下面是 <code>input</code> 命令的一些用法举例。</p><h3 id="电源键"><a href="#电源键" class="headerlink" title="电源键"></a>电源键</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 26</code></pre><p>执行效果相当于按电源键。</p><h3 id="菜单键"><a href="#菜单键" class="headerlink" title="菜单键"></a>菜单键</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 82</code></pre><h3 id="HOME-键"><a href="#HOME-键" class="headerlink" title="HOME 键"></a>HOME 键</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 3</code></pre><h3 id="返回键"><a href="#返回键" class="headerlink" title="返回键"></a>返回键</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 4</code></pre><h3 id="音量控制"><a href="#音量控制" class="headerlink" title="音量控制"></a>音量控制</h3><p>增加音量：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 24</code></pre><p>降低音量：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 25</code></pre><p>静音：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 164</code></pre><h3 id="媒体控制"><a href="#媒体控制" class="headerlink" title="媒体控制"></a>媒体控制</h3><p>播放/暂停：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 85</code></pre><p>停止播放：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 86</code></pre><p>播放下一首：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 87</code></pre><p>播放上一首：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 88</code></pre><p>恢复播放：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 126</code></pre><p>暂停播放：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 127</code></pre><h3 id="点亮-熄灭屏幕"><a href="#点亮-熄灭屏幕" class="headerlink" title="点亮/熄灭屏幕"></a>点亮/熄灭屏幕</h3><p>可以通过上文讲述过的模拟电源键来切换点亮和熄灭屏幕，但如果明确地想要点亮或者熄灭屏幕，那可以使用如下方法。</p><p>点亮屏幕：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 224</code></pre><p>熄灭屏幕：</p><pre class=" language-sh"><code class="language-sh">adb shell input keyevent 223</code></pre><h3 id="滑动解锁"><a href="#滑动解锁" class="headerlink" title="滑动解锁"></a>滑动解锁</h3><p>如果锁屏没有密码，是通过滑动手势解锁，那么可以通过 <code>input swipe</code> 来解锁。</p><p>命令（参数以机型 Nexus 5，向上滑动手势解锁举例）：</p><pre class=" language-sh"><code class="language-sh">adb shell input swipe 300 1000 300 500</code></pre><p>参数 <code>300 1000 300 500</code> 分别表示<code>起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标</code>。</p><h3 id="输入文本"><a href="#输入文本" class="headerlink" title="输入文本"></a>输入文本</h3><p>在焦点处于某文本框时，可以通过 <code>input</code> 命令来输入文本。</p><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell input text hello</code></pre><p>现在 <code>hello</code> 出现在文本框了。</p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>Android 系统的日志分为两部分，底层的 Linux 内核日志输出到 /proc/kmsg，Android 的日志输出到 /dev/log。</p><h3 id="Android-日志"><a href="#Android-日志" class="headerlink" title="Android 日志"></a>Android 日志</h3><p>命令格式：</p><pre class=" language-sh"><code class="language-sh">[adb] logcat [<option>] ... [<filter-spec>] ...</code></pre><p>常用用法列举如下：</p><h4 id="按级别过滤日志"><a href="#按级别过滤日志" class="headerlink" title="按级别过滤日志"></a>按级别过滤日志</h4><p>Android 的日志分为如下几个优先级（priority）：</p><ul><li>V —— Verbose（最低，输出得最多）</li><li>D —— Debug</li><li>I —— Info</li><li>W —— Warning</li><li>E —— Error</li><li>F —— Fatal</li><li>S —— Silent（最高，啥也不输出）</li></ul><p>按某级别过滤日志则会将该级别及以上的日志输出。</p><p>比如，命令：</p><pre class=" language-sh"><code class="language-sh">adb logcat *:W</code></pre><p>会将 Warning、Error、Fatal 和 Silent 日志输出。</p><p>（<strong>注：</strong> 在 macOS 下需要给 <code>*:W</code> 这样以 <code>*</code> 作为 tag 的参数加双引号，如 <code>adb logcat &quot;*:W&quot;</code>，不然会报错 <code>no matches found: *:W</code>。）</p><h4 id="按-tag-和级别过滤日志"><a href="#按-tag-和级别过滤日志" class="headerlink" title="按 tag 和级别过滤日志"></a>按 tag 和级别过滤日志</h4><p><code>&lt;filter-spec&gt;</code> 可以由多个 <code>&lt;tag&gt;[:priority]</code> 组成。</p><p>比如，命令：</p><pre class=" language-sh"><code class="language-sh">adb logcat ActivityManager:I MyApp:D *:S</code></pre><p>表示输出 tag <code>ActivityManager</code> 的 Info 以上级别日志，输出 tag <code>MyApp</code> 的 Debug 以上级别日志，及其它 tag 的 Silent 级别日志（即屏蔽其它 tag 日志）。</p><h4 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h4><p>可以用 <code>adb logcat -v &lt;format&gt;</code> 选项指定日志输出格式。</p><p>日志支持按以下几种 <code>&lt;format&gt;</code>：</p><ul><li><p>brief</p><p>默认格式。格式为：</p><pre class=" language-sh"><code class="language-sh"><priority>/<tag>(<pid>): <message></code></pre><p>示例：</p><pre class=" language-sh"><code class="language-sh">D/HeadsetStateMachine( 1785): Disconnected process message: 10, size: 0</code></pre></li><li><p>process</p><p>格式为：</p><pre class=" language-sh"><code class="language-sh"><priority>(<pid>) <message></code></pre><p>示例：</p><pre class=" language-sh"><code class="language-sh">D( 1785) Disconnected process message: 10, size: 0  (HeadsetStateMachine)</code></pre></li><li><p>tag</p><p>格式为：</p><pre class=" language-sh"><code class="language-sh"><priority>/<tag>: <message></code></pre><p>示例：</p><pre class=" language-sh"><code class="language-sh">D/HeadsetStateMachine: Disconnected process message: 10, size: 0</code></pre></li><li><p>raw</p><p>格式为：</p><pre class=" language-sh"><code class="language-sh"><message></code></pre><p>示例：</p><pre class=" language-sh"><code class="language-sh">Disconnected process message: 10, size: 0</code></pre></li><li><p>time</p><p>格式为：</p><pre class=" language-sh"><code class="language-sh"><datetime> <priority>/<tag>(<pid>): <message></code></pre><p>示例：</p><pre class=" language-sh"><code class="language-sh">08-28 22:39:39.974 D/HeadsetStateMachine( 1785): Disconnected process message: 10, size: 0</code></pre></li><li><p>threadtime</p><p>格式为：</p><pre class=" language-sh"><code class="language-sh"><datetime> <pid> <tid> <priority> <tag>: <message></code></pre><p>示例：</p><pre class=" language-sh"><code class="language-sh">08-28 22:39:39.974  1785  1832 D HeadsetStateMachine: Disconnected process message: 10, size: 0</code></pre></li><li><p>long</p><p>格式为：</p><pre class=" language-sh"><code class="language-sh">[ <datetime> <pid>:<tid> <priority>/<tag> ]<message></code></pre><p>示例：</p><pre class=" language-sh"><code class="language-sh">[ 08-28 22:39:39.974  1785: 1832 D/HeadsetStateMachine ]Disconnected process message: 10, size: 0</code></pre></li></ul><p>指定格式可与上面的过滤同时使用。比如：</p><pre class=" language-sh"><code class="language-sh">adb logcat -v long ActivityManager:I *:S</code></pre><h4 id="清空日志"><a href="#清空日志" class="headerlink" title="清空日志"></a>清空日志</h4><pre class=" language-sh"><code class="language-sh">adb logcat -c</code></pre><h3 id="内核日志"><a href="#内核日志" class="headerlink" title="内核日志"></a>内核日志</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell dmesg</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh"><6>[14201.684016] PM: noirq resume of devices complete after 0.982 msecs<6>[14201.685525] PM: early resume of devices complete after 0.838 msecs<6>[14201.753642] PM: resume of devices complete after 68.106 msecs<4>[14201.755954] Restarting tasks ... done.<6>[14201.771229] PM: suspend exit 2016-08-28 13:31:32.679217193 UTC<6>[14201.872373] PM: suspend entry 2016-08-28 13:31:32.780363596 UTC<6>[14201.872498] PM: Syncing filesystems ... done.</code></pre><p>中括号里的 <code>[14201.684016]</code> 代表内核开始启动后的时间，单位为秒。</p><p>通过内核日志我们可以做一些事情，比如衡量内核启动时间，在系统启动完毕后的内核日志里找到 <code>Freeing init memory</code> 那一行前面的时间就是。</p><h2 id="查看设备信息"><a href="#查看设备信息" class="headerlink" title="查看设备信息"></a>查看设备信息</h2><h3 id="型号"><a href="#型号" class="headerlink" title="型号"></a>型号</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell getprop ro.product.model</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">Nexus 5</code></pre><h3 id="电池状况"><a href="#电池状况" class="headerlink" title="电池状况"></a>电池状况</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell dumpsys battery</code></pre><p>输入示例：</p><pre class=" language-sh"><code class="language-sh">Current Battery Service state:  AC powered: false  USB powered: true  Wireless powered: false  status: 2  health: 2  present: true  level: 44  scale: 100  voltage: 3872  temperature: 280  technology: Li-poly</code></pre><p>其中 <code>scale</code> 代表最大电量，<code>level</code> 代表当前电量。上面的输出表示还剩下 44% 的电量。</p><h3 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell wm size</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">Physical size: 1080x1920</code></pre><p>该设备屏幕分辨率为 1080px * 1920px。</p><p>如果使用命令修改过，那输出可能是：</p><pre class=" language-sh"><code class="language-sh">Physical size: 1080x1920Override size: 480x1024</code></pre><p>表明设备的屏幕分辨率原本是 1080px * 1920px，当前被修改为 480px * 1024px。</p><h3 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell wm density</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">Physical density: 420</code></pre><p>该设备屏幕密度为 420dpi。</p><p>如果使用命令修改过，那输出可能是：</p><pre class=" language-sh"><code class="language-sh">Physical density: 480Override density: 160</code></pre><p>表明设备的屏幕密度原来是 480dpi，当前被修改为 160dpi。</p><h3 id="显示屏参数"><a href="#显示屏参数" class="headerlink" title="显示屏参数"></a>显示屏参数</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell dumpsys window displays</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">WINDOW MANAGER DISPLAY CONTENTS (dumpsys window displays)  Display: mDisplayId=0    init=1080x1920 420dpi cur=1080x1920 app=1080x1794 rng=1080x1017-1810x1731    deferred=false layoutNeeded=false</code></pre><p>其中 <code>mDisplayId</code> 为 显示屏编号，<code>init</code> 是初始分辨率和屏幕密度，<code>app</code> 的高度比 <code>init</code> 里的要小，表示屏幕底部有虚拟按键，高度为 1920 - 1794 = 126px 合 42dp。</p><h3 id="android-id"><a href="#android-id" class="headerlink" title="android_id"></a>android_id</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell settings get secure android_id</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">51b6be48bac8c569</code></pre><h3 id="IMEI"><a href="#IMEI" class="headerlink" title="IMEI"></a>IMEI</h3><p>在 Android 4.4 及以下版本可通过如下命令获取 IMEI：</p><pre class=" language-sh"><code class="language-sh">adb shell dumpsys iphonesubinfo</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">Phone Subscriber Info:  Phone Type = GSM  Device ID = 860955027785041</code></pre><p>其中的 <code>Device ID</code> 就是 IMEI。</p><p>而在 Android 5.0 及以上版本里这个命令输出为空，得通过其它方式获取了（需要 root 权限）：</p><pre class=" language-sh"><code class="language-sh">adb shellsuservice call iphonesubinfo 1</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">Result: Parcel(  0x00000000: 00000000 0000000f 00360038 00390030 '........8.6.0.9.'  0x00000010: 00350035 00320030 00370037 00350038 '5.5.0.2.7.7.8.5.'  0x00000020: 00340030 00000031                   '0.4.1...        ')</code></pre><p>把里面的有效内容提取出来就是 IMEI 了，比如这里的是 <code>860955027785041</code>。</p><p>参考：<a href="http://stackoverflow.com/questions/27002663/adb-shell-dumpsys-iphonesubinfo-not-working-since-android-5-0-lollipop" target="_blank" rel="noopener">adb shell dumpsys iphonesubinfo not working since Android 5.0 Lollipop</a></p><h3 id="Android-系统版本"><a href="#Android-系统版本" class="headerlink" title="Android 系统版本"></a>Android 系统版本</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell getprop ro.build.version.release</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">5.0.2</code></pre><h3 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h3><p>每次想知道设备的 IP 地址的时候都得「设置」-「关于手机」-「状态信息」-「IP地址」很烦对不对？通过 adb 可以方便地查看。</p><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell ifconfig | grep Mask</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">inet addr:10.130.245.230  Mask:255.255.255.252inet addr:127.0.0.1  Mask:255.0.0.0</code></pre><p>那么 <code>10.130.245.230</code> 就是设备 IP 地址。</p><p>在有的设备上这个命令没有输出，如果设备连着 WiFi，可以使用如下命令来查看局域网 IP：</p><pre class=" language-sh"><code class="language-sh">adb shell ifconfig wlan0</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">wlan0: ip 10.129.160.99 mask 255.255.240.0 flags [up broadcast running multicast]</code></pre><p>或</p><pre class=" language-sh"><code class="language-sh">wlan0     Link encap:UNSPEC          inet addr:10.129.168.57  Bcast:10.129.175.255  Mask:255.255.240.0          inet6 addr: fe80::66cc:2eff:fe68:b6b6/64 Scope: Link          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:496520 errors:0 dropped:0 overruns:0 frame:0          TX packets:68215 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:3000          RX bytes:116266821 TX bytes:8311736</code></pre><p>如果以上命令仍然不能得到期望的信息，那可以试试以下命令（部分系统版本里可用）：</p><pre class=" language-sh"><code class="language-sh">adb shell netcfg</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">wlan0    UP                               10.129.160.99/20  0x00001043 f8:a9:d0:17:42:4dlo       UP                                   127.0.0.1/8   0x00000049 00:00:00:00:00:00p2p0     UP                                     0.0.0.0/0   0x00001003 fa:a9:d0:17:42:4dsit0     DOWN                                   0.0.0.0/0   0x00000080 00:00:00:00:00:00rmnet0   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00rmnet1   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00rmnet3   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00rmnet2   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00rmnet4   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00rmnet6   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00rmnet5   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00rmnet7   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00rev_rmnet3 DOWN                                   0.0.0.0/0   0x00001002 4e:b7:e4:2e:17:58rev_rmnet2 DOWN                                   0.0.0.0/0   0x00001002 4e:f0:c8:bf:7a:cfrev_rmnet4 DOWN                                   0.0.0.0/0   0x00001002 a6:c0:3b:6b:c4:1frev_rmnet6 DOWN                                   0.0.0.0/0   0x00001002 66:bb:5d:64:2e:e9rev_rmnet5 DOWN                                   0.0.0.0/0   0x00001002 0e:1b:eb:b9:23:a0rev_rmnet7 DOWN                                   0.0.0.0/0   0x00001002 7a:d9:f6:81:40:5arev_rmnet8 DOWN                                   0.0.0.0/0   0x00001002 4e:e2:a9:bb:d0:1brev_rmnet0 DOWN                                   0.0.0.0/0   0x00001002 fe:65:d0:ca:82:a9rev_rmnet1 DOWN                                   0.0.0.0/0   0x00001002 da:d8:e8:4f:2e:fe</code></pre><p>可以看到网络连接名称、启用状态、IP 地址和 Mac 地址等信息。</p><h3 id="Mac-地址"><a href="#Mac-地址" class="headerlink" title="Mac 地址"></a>Mac 地址</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell cat /sys/class/net/wlan0/address</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">f8:a9:d0:17:42:4d</code></pre><p>这查看的是局域网 Mac 地址，移动网络或其它连接的信息可以通过前面的小节「IP 地址」里提到的 <code>adb shell netcfg</code> 命令来查看。</p><h3 id="CPU-信息"><a href="#CPU-信息" class="headerlink" title="CPU 信息"></a>CPU 信息</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell cat /proc/cpuinfo</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">Processor       : ARMv7 Processor rev 0 (v7l)processor       : 0BogoMIPS        : 38.40processor       : 1BogoMIPS        : 38.40processor       : 2BogoMIPS        : 38.40processor       : 3BogoMIPS        : 38.40Features        : swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivtCPU implementer : 0x51CPU architecture: 7CPU variant     : 0x2CPU part        : 0x06fCPU revision    : 0Hardware        : Qualcomm MSM 8974 HAMMERHEAD (Flattened Device Tree)Revision        : 000bSerial          : 0000000000000000</code></pre><p>这是 Nexus 5 的 CPU 信息，我们从输出里可以看到使用的硬件是 <code>Qualcomm MSM 8974</code>，processor 的编号是 0 到 3，所以它是四核的，采用的架构是 <code>ARMv7 Processor rev 0 (v71)</code>。</p><h3 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell cat /proc/meminfo</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">MemTotal:        1027424 kBMemFree:          486564 kBBuffers:           15224 kBCached:            72464 kBSwapCached:        24152 kBActive:           110572 kBInactive:         259060 kBActive(anon):      79176 kBInactive(anon):   207736 kBActive(file):      31396 kBInactive(file):    51324 kBUnevictable:        3948 kBMlocked:               0 kBHighTotal:        409600 kBHighFree:         132612 kBLowTotal:         617824 kBLowFree:          353952 kBSwapTotal:        262140 kBSwapFree:         207572 kBDirty:                 0 kBWriteback:             0 kBAnonPages:        265324 kBMapped:            47072 kBShmem:              1020 kBSlab:              57372 kBSReclaimable:       7692 kBSUnreclaim:        49680 kBKernelStack:        4512 kBPageTables:         5912 kBNFS_Unstable:          0 kBBounce:                0 kBWritebackTmp:          0 kBCommitLimit:      775852 kBCommitted_AS:   13520632 kBVmallocTotal:     385024 kBVmallocUsed:       61004 kBVmallocChunk:     209668 kB</code></pre><p>其中，<code>MemTotal</code> 就是设备的总内存，<code>MemFree</code> 是当前空闲内存。</p><h3 id="更多硬件与系统属性"><a href="#更多硬件与系统属性" class="headerlink" title="更多硬件与系统属性"></a>更多硬件与系统属性</h3><p>设备的更多硬件与系统属性可以通过如下命令查看：</p><pre class=" language-sh"><code class="language-sh">adb shell cat /system/build.prop</code></pre><p>这会输出很多信息，包括前面几个小节提到的「型号」和「Android 系统版本」等。</p><p>输出里还包括一些其它有用的信息，它们也可通过 <code>adb shell getprop &lt;属性名&gt;</code> 命令单独查看，列举一部分属性如下：</p><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>ro.build.version.sdk</td><td>SDK 版本</td></tr><tr><td>ro.build.version.release</td><td>Android 系统版本</td></tr><tr><td>ro.build.version.security_patch</td><td>Android 安全补丁程序级别</td></tr><tr><td>ro.product.model</td><td>型号</td></tr><tr><td>ro.product.brand</td><td>品牌</td></tr><tr><td>ro.product.name</td><td>设备名</td></tr><tr><td>ro.product.board</td><td>处理器型号</td></tr><tr><td>ro.product.cpu.abilist</td><td>CPU 支持的 abi 列表[<em>节注一</em>]</td></tr><tr><td>persist.sys.isUsbOtgEnabled</td><td>是否支持 OTG</td></tr><tr><td>dalvik.vm.heapsize</td><td>每个应用程序的内存上限</td></tr><tr><td>ro.sf.lcd_density</td><td>屏幕密度</td></tr></tbody></table><p><em>节注一：</em></p><p>一些小厂定制的 ROM 可能修改过 CPU 支持的 abi 列表的属性名，如果用 <code>ro.product.cpu.abilist</code> 属性名查找不到，可以这样试试：</p><pre class=" language-sh"><code class="language-sh">adb shell cat /system/build.prop | grep ro.product.cpu.abi</code></pre><p>示例输出：</p><pre class=" language-sh"><code class="language-sh">ro.product.cpu.abi=armeabi-v7aro.product.cpu.abi2=armeabi</code></pre><h2 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h2><p><strong>注：</strong> 修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 <code>adb reboot</code> 重启设备，或手动重启。</p><p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p><h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell wm size 480x1024</code></pre><p>表示将分辨率修改为 480px * 1024px。</p><p>恢复原分辨率命令：</p><pre class=" language-sh"><code class="language-sh">adb shell wm size reset</code></pre><h3 id="屏幕密度-1"><a href="#屏幕密度-1" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell wm density 160</code></pre><p>表示将屏幕密度修改为 160dpi。</p><p>恢复原屏幕密度命令：</p><pre class=" language-sh"><code class="language-sh">adb shell wm density reset</code></pre><h3 id="显示区域"><a href="#显示区域" class="headerlink" title="显示区域"></a>显示区域</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell wm overscan 0,0,0,200</code></pre><p>四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 200px 留白。</p><p>恢复原显示区域命令：</p><pre class=" language-sh"><code class="language-sh">adb shell wm overscan reset</code></pre><h3 id="关闭-USB-调试模式"><a href="#关闭-USB-调试模式" class="headerlink" title="关闭 USB 调试模式"></a>关闭 USB 调试模式</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell settings put global adb_enabled 0</code></pre><p>恢复：</p><p>用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。</p><p>去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。</p><h3 id="允许-禁止访问非-SDK-API"><a href="#允许-禁止访问非-SDK-API" class="headerlink" title="允许/禁止访问非 SDK API"></a>允许/禁止访问非 SDK API</h3><p>允许访问非 SDK API：</p><pre class=" language-sh"><code class="language-sh">adb shell settings put global hidden_api_policy_pre_p_apps 1adb shell settings put global hidden_api_policy_p_apps 1</code></pre><p>禁止访问非 SDK API：</p><pre class=" language-sh"><code class="language-sh">adb shell settings delete global hidden_api_policy_pre_p_appsadb shell settings delete global hidden_api_policy_p_apps</code></pre><p>不需要设备获得 Root 权限。</p><p>命令最后的数字的含义：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>禁止检测非 SDK 接口的调用。该情况下，日志记录功能被禁用，并且令 strict mode API，即 detectNonSdkApiUsage() 无效。不推荐。</td></tr><tr><td>1</td><td>仅警告——允许访问所有非 SDK 接口，但保留日志中的警告信息，可继续使用 strick mode API。</td></tr><tr><td>2</td><td>禁止调用深灰名单和黑名单中的接口。</td></tr><tr><td>3</td><td>禁止调用黑名单中的接口，但允许调用深灰名单中的接口。</td></tr></tbody></table><h3 id="状态栏和导航栏的显示隐藏"><a href="#状态栏和导航栏的显示隐藏" class="headerlink" title="状态栏和导航栏的显示隐藏"></a>状态栏和导航栏的显示隐藏</h3><p>本节所说的相关设置对应 Cyanogenmod 里的「扩展桌面」。</p><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell settings put global policy_control <key-values></code></pre><p><code>&lt;key-values&gt;</code> 可由如下几种键及其对应的值组成，格式为 <code>&lt;key1&gt;=&lt;value1&gt;:&lt;key2&gt;=&lt;value2&gt;</code>。</p><table><thead><tr><th>key</th><th>含义</th></tr></thead><tbody><tr><td>immersive.full</td><td>同时隐藏</td></tr><tr><td>immersive.status</td><td>隐藏状态栏</td></tr><tr><td>immersive.navigation</td><td>隐藏导航栏</td></tr><tr><td>immersive.preconfirms</td><td>?</td></tr></tbody></table><p>这些键对应的值可则如下值用逗号组合：</p><table><thead><tr><th>value</th><th>含义</th></tr></thead><tbody><tr><td><code>apps</code></td><td>所有应用</td></tr><tr><td><code>*</code></td><td>所有界面</td></tr><tr><td><code>packagename</code></td><td>指定应用</td></tr><tr><td><code>-packagename</code></td><td>排除指定应用</td></tr></tbody></table><p>例如：</p><pre class=" language-sh"><code class="language-sh">adb shell settings put global policy_control immersive.full=*</code></pre><p>表示设置在所有界面下都同时隐藏状态栏和导航栏。</p><pre class=" language-sh"><code class="language-sh">adb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3</code></pre><p>表示设置在包名为 <code>com.package1</code> 和 <code>com.package2</code> 的应用里隐藏状态栏，在除了包名为 <code>com.package3</code> 的所有应用里隐藏导航栏。</p><h2 id="实用功能"><a href="#实用功能" class="headerlink" title="实用功能"></a>实用功能</h2><h3 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h3><p>截图保存到电脑：</p><pre class=" language-sh"><code class="language-sh">adb exec-out screencap -p > sc.png</code></pre><p>如果 adb 版本较老，无法使用 <code>exec-out</code> 命令，这时候建议更新 adb 版本。无法更新的话可以使用以下麻烦点的办法：</p><p>先截图保存到设备里：</p><pre class=" language-sh"><code class="language-sh">adb shell screencap -p /sdcard/sc.png</code></pre><p>然后将 png 文件导出到电脑：</p><pre class=" language-sh"><code class="language-sh">adb pull /sdcard/sc.png</code></pre><p>可以使用 <code>adb shell screencap -h</code> 查看 <code>screencap</code> 命令的帮助信息，下面是两个有意义的参数及含义：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-p</td><td>指定保存文件为 png 格式</td></tr><tr><td>-d display-id</td><td>指定截图的显示屏编号（有多显示屏的情况下）</td></tr></tbody></table><p>实测如果指定文件名以 <code>.png</code> 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。</p><p>另外一种一行命令截图并保存到电脑的方法：</p><p><em>Linux 和 Windows</em></p><pre class=" language-sh"><code class="language-sh">adb shell screencap -p | sed "s/\r$//" > sc.png</code></pre><p><em>Mac OS X</em></p><pre class=" language-sh"><code class="language-sh">adb shell screencap -p | gsed "s/\r$//" > sc.png</code></pre><p>这个方法需要用到 gnu sed 命令，在 Linux 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 <a href="http://gnuwin32.sourceforge.net/packages/sed.htm" target="_blank" rel="noopener">sed for Windows</a> 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。</p><p>而在 Mac 下使用系统自带的 sed 命令会报错：</p><pre class=" language-sh"><code class="language-sh">sed: RE error: illegal byte sequence</code></pre><p>需要安装 gnu-sed，然后使用 gsed 命令：</p><pre class=" language-sh"><code class="language-sh">brew install gnu-sed</code></pre><h3 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h3><p>录制屏幕以 mp4 格式保存到 /sdcard：</p><pre class=" language-sh"><code class="language-sh">adb shell screenrecord /sdcard/filename.mp4</code></pre><p>需要停止时按 Ctrl-C，默认录制时间和最长录制时间都是 180 秒。</p><p>如果需要导出到电脑：</p><pre class=" language-sh"><code class="language-sh">adb pull /sdcard/filename.mp4</code></pre><p>可以使用 <code>adb shell screenrecord --help</code> 查看 <code>screenrecord</code> 命令的帮助信息，下面是常见参数及含义：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>–size WIDTHxHEIGHT</td><td>视频的尺寸，比如 <code>1280x720</code>，默认是屏幕分辨率。</td></tr><tr><td>–bit-rate RATE</td><td>视频的比特率，默认是 4Mbps。</td></tr><tr><td>–time-limit TIME</td><td>录制时长，单位秒。</td></tr><tr><td>–verbose</td><td>输出更多信息。</td></tr></tbody></table><h3 id="重新挂载-system-分区为可写"><a href="#重新挂载-system-分区为可写" class="headerlink" title="重新挂载 system 分区为可写"></a>重新挂载 system 分区为可写</h3><p><strong>注：需要 root 权限。</strong></p><p>/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。</p><p>步骤：</p><ol><li><p>进入 shell 并切换到 root 用户权限。</p><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shellsu</code></pre></li><li><p>查看当前分区挂载情况。</p><p>命令：</p><pre class=" language-sh"><code class="language-sh">mount</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">rootfs / rootfs ro,relatime 0 0tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0proc /proc proc rw,relatime 0 0sysfs /sys sysfs rw,seclabel,relatime 0 0selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0debugfs /sys/kernel/debug debugfs rw,relatime 0 0none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0none /acct cgroup rw,relatime,cpuacct 0 0none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0none /dev/memcg cgroup rw,relatime,memory 0 0none /dev/cpuctl cgroup rw,relatime,cpu 0 0none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0/dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0/dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0/dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0/dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</code></pre><p>找到其中我们关注的带 /system 的那一行：</p><pre class=" language-sh"><code class="language-sh">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</code></pre></li><li><p>重新挂载。</p><p>命令：</p><pre class=" language-sh"><code class="language-sh">mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system</code></pre><p>这里的 <code>/dev/block/platform/msm_sdcc.1/by-name/system</code> 就是我们从上一步的输出里得到的文件路径。</p></li></ol><p>如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。</p><h3 id="查看连接过的-WiFi-密码"><a href="#查看连接过的-WiFi-密码" class="headerlink" title="查看连接过的 WiFi 密码"></a>查看连接过的 WiFi 密码</h3><p><strong>注：需要 root 权限。</strong></p><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shellsucat /data/misc/wifi/*.conf</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">network={    ssid="TP-LINK_9DFC"    scan_ssid=1    psk="123456789"    key_mgmt=WPA-PSK    group=CCMP TKIP    auth_alg=OPEN    sim_num=1    priority=13893}network={    ssid="TP-LINK_F11E"    psk="987654321"    key_mgmt=WPA-PSK    sim_num=1    priority=17293}</code></pre><p><code>ssid</code> 即为我们在 WLAN 设置里看到的名称，<code>psk</code> 为密码，<code>key_mgmt</code> 为安全加密方式。</p><h3 id="设置系统日期和时间"><a href="#设置系统日期和时间" class="headerlink" title="设置系统日期和时间"></a>设置系统日期和时间</h3><p><strong>注：需要 root 权限。</strong></p><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shellsudate -s 20160823.131500</code></pre><p>表示将系统日期和时间更改为 2016 年 08 月 23 日 13 点 15 分 00 秒。</p><h3 id="重启手机"><a href="#重启手机" class="headerlink" title="重启手机"></a>重启手机</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb reboot</code></pre><h3 id="检测设备是否已-root"><a href="#检测设备是否已-root" class="headerlink" title="检测设备是否已 root"></a>检测设备是否已 root</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shellsu</code></pre><p>此时命令行提示符是 <code>$</code> 则表示没有 root 权限，是 <code>#</code> 则表示已 root。</p><h3 id="使用-Monkey-进行压力测试"><a href="#使用-Monkey-进行压力测试" class="headerlink" title="使用 Monkey 进行压力测试"></a>使用 Monkey 进行压力测试</h3><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p><p>简单用法：</p><pre class=" language-sh"><code class="language-sh">adb shell monkey -p <packagename> -v 500</code></pre><p>表示向 <code>&lt;packagename&gt;</code> 指定的应用程序发送 500 个伪随机事件。</p><p>Monkey 的详细用法参考 <a href="https://developer.android.com/studio/test/monkey.html" target="_blank" rel="noopener">官方文档</a>。</p><h3 id="开启-关闭-WiFi"><a href="#开启-关闭-WiFi" class="headerlink" title="开启/关闭 WiFi"></a>开启/关闭 WiFi</h3><p><strong>注：需要 root 权限。</strong></p><p>有时需要控制设备的 WiFi 状态，可以用以下指令完成。</p><p>开启 WiFi：</p><pre class=" language-sh"><code class="language-sh">adb rootadb shell svc wifi enable</code></pre><p>关闭 WiFi：</p><pre class=" language-sh"><code class="language-sh">adb rootadb shell svc wifi disable</code></pre><p>若执行成功，输出为空；若未取得 root 权限执行此命令，将执行失败，输出 <code>Killed</code>。</p><h2 id="刷机相关命令"><a href="#刷机相关命令" class="headerlink" title="刷机相关命令"></a>刷机相关命令</h2><h3 id="重启到-Recovery-模式"><a href="#重启到-Recovery-模式" class="headerlink" title="重启到 Recovery 模式"></a>重启到 Recovery 模式</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb reboot recovery</code></pre><h3 id="从-Recovery-重启到-Android"><a href="#从-Recovery-重启到-Android" class="headerlink" title="从 Recovery 重启到 Android"></a>从 Recovery 重启到 Android</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb reboot</code></pre><h3 id="重启到-Fastboot-模式"><a href="#重启到-Fastboot-模式" class="headerlink" title="重启到 Fastboot 模式"></a>重启到 Fastboot 模式</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb reboot bootloader</code></pre><h3 id="通过-sideload-更新系统"><a href="#通过-sideload-更新系统" class="headerlink" title="通过 sideload 更新系统"></a>通过 sideload 更新系统</h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p><p>以 Recovery 模式下更新为例：</p><ol><li><p>重启到 Recovery 模式。</p><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb reboot recovery</code></pre></li><li><p>在设备的 Recovery 界面上操作进入 <code>Apply update</code>-<code>Apply from ADB</code>。</p><p>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 <code>Apply update from ADB</code>。</p></li><li><p>通过 adb 上传和更新系统。</p><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb sideload <path-to-update.zip></code></pre></li></ol><h2 id="安全相关命令"><a href="#安全相关命令" class="headerlink" title="安全相关命令"></a>安全相关命令</h2><h3 id="启用-禁用-SELinux"><a href="#启用-禁用-SELinux" class="headerlink" title="启用/禁用 SELinux"></a>启用/禁用 SELinux</h3><p>启用 SELinux</p><pre class=" language-sh"><code class="language-sh">adb rootadb shell setenforce 1</code></pre><p>禁用 SELinux</p><pre class=" language-sh"><code class="language-sh">adb rootadb shell setenforce 0</code></pre><h3 id="启用-禁用-dm-verity"><a href="#启用-禁用-dm-verity" class="headerlink" title="启用/禁用 dm_verity"></a>启用/禁用 dm_verity</h3><p>启用 dm_verity</p><pre class=" language-sh"><code class="language-sh">adb rootadb enable-verity</code></pre><p>禁用 dm_verity</p><pre class=" language-sh"><code class="language-sh">adb rootadb disable-verity</code></pre><h2 id="更多-adb-shell-命令"><a href="#更多-adb-shell-命令" class="headerlink" title="更多 adb shell 命令"></a>更多 adb shell 命令</h2><p>Android 系统是基于 Linux 内核的，所以 Linux 里的很多命令在 Android 里也有相同或类似的实现，在 <code>adb shell</code> 里可以调用。本文档前面的部分内容已经用到了 <code>adb shell</code> 命令。</p><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell ps</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">USER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAMEroot      1     0     8904   788   ffffffff 00000000 S /initroot      2     0     0      0     ffffffff 00000000 S kthreadd...u0_a71    7779  5926  1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classicu0_a58    7963  5926  1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure...shell     8750  217   10640  740   00000000 b6f28340 R ps</code></pre><p>各列含义：</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>USER</td><td>所属用户</td></tr><tr><td>PID</td><td>进程 ID</td></tr><tr><td>PPID</td><td>父进程 ID</td></tr><tr><td>NAME</td><td>进程名</td></tr></tbody></table><h3 id="查看实时资源占用情况"><a href="#查看实时资源占用情况" class="headerlink" title="查看实时资源占用情况"></a>查看实时资源占用情况</h3><p>命令：</p><pre class=" language-sh"><code class="language-sh">adb shell top</code></pre><p>输出示例：</p><pre class=" language-sh"><code class="language-sh">User 0%, System 6%, IOW 0%, IRQ 0%User 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307  PID PR CPU% S  #THR     VSS     RSS PCY UID      Name 8763  0   3% R     1  10640K   1064K  fg shell    top  131  0   3% S     1      0K      0K  fg root     dhd_dpc 6144  0   0% S   115 1682004K 115916K  fg system   system_server  132  0   0% S     1      0K      0K  fg root     dhd_rxf 1731  0   0% S     6  20288K    788K  fg root     /system/bin/mpdecision  217  0   0% S     6  18008K    356K  fg shell    /sbin/adbd ... 7779  2   0% S    19 1538748K  48896K  bg u0_a71   com.sohu.inputmethod.sogou:classic 7963  0   0% S    18 1561916K  59568K  fg u0_a58   org.mazhuang.boottimemeasure ...</code></pre><p>各列含义：</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>PID</td><td>进程 ID</td></tr><tr><td>PR</td><td>优先级</td></tr><tr><td>CPU%</td><td>当前瞬间占用 CPU 百分比</td></tr><tr><td>S</td><td>进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</td></tr><tr><td>#THR</td><td>线程数</td></tr><tr><td>VSS</td><td>Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）</td></tr><tr><td>RSS</td><td>Resident Set Size 实际使用物理内存（包含共享库占用的内存）</td></tr><tr><td>PCY</td><td>调度策略优先级，SP_BACKGROUND/SPFOREGROUND</td></tr><tr><td>UID</td><td>进程所有者的用户 ID</td></tr><tr><td>NAME</td><td>进程名</td></tr></tbody></table><p><code>top</code> 命令还支持一些命令行参数，详细用法如下：</p><pre class=" language-sh"><code class="language-sh">Usage: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]    -m num  最多显示多少个进程    -n num  刷新多少次后退出    -d num  刷新时间间隔（单位秒，默认值 5）    -s col  按某列排序（可用 col 值：cpu, vss, rss, thr）    -t      显示线程信息    -h      显示帮助文档</code></pre><h3 id="查看进程-UID"><a href="#查看进程-UID" class="headerlink" title="查看进程 UID"></a>查看进程 UID</h3><p>有两种方案：</p><ol><li><p><code>adb shell dumpsys package  | grep userId=</code></p><p>如：</p><pre class=" language-sh"><code class="language-sh">$ adb shell dumpsys package org.mazhuang.guanggoo | grep userId=  userId=10394</code></pre></li><li><p>通过 ps 命令找到对应进程的 pid 之后 <code>adb shell cat /proc//status | grep Uid</code></p><p>如：</p><pre class=" language-sh"><code class="language-sh">$ adb shellgemini:/ $ ps | grep org.mazhuang.guanggoou0_a394   28635 770   1795812 78736 SyS_epoll_ 0000000000 S org.mazhuang.guanggoogemini:/ $ cat /proc/28635/status | grep UidUid:    10394   10394   10394   10394gemini:/ $</code></pre></li></ol><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明：</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>cat</td><td>显示文件内容</td></tr><tr><td>cd</td><td>切换目录</td></tr><tr><td>chmod</td><td>改变文件的存取模式/访问权限</td></tr><tr><td>df</td><td>查看磁盘空间使用情况</td></tr><tr><td>grep</td><td>过滤输出</td></tr><tr><td>kill</td><td>杀死指定 PID 的进程</td></tr><tr><td>ls</td><td>列举目录内容</td></tr><tr><td>mount</td><td>挂载目录的查看和管理</td></tr><tr><td>mv</td><td>移动或重命名文件</td></tr><tr><td>ps</td><td>查看正在运行的进程</td></tr><tr><td>rm</td><td>删除文件</td></tr><tr><td>top</td><td>查看进程的资源占用情况</td></tr></tbody></table><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="启动-adb-server-失败"><a href="#启动-adb-server-失败" class="headerlink" title="启动 adb server 失败"></a>启动 adb server 失败</h3><p><strong>出错提示</strong></p><pre class=" language-sh"><code class="language-sh">error: protocol fault (couldn't read status): No error</code></pre><p><strong>可能原因</strong></p><p>adb server 进程想使用的 5037 端口被占用。</p><p><strong>解决方案</strong></p><p>找到占用 5037 端口的进程，然后终止它。以 Windows 下为例：</p><pre class=" language-sh"><code class="language-sh">netstat -ano | findstr LISTENING...TCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       1548...</code></pre><p>这里 1548 即为进程 ID，用命令结束该进程：</p><pre class=" language-sh"><code class="language-sh">taskkill /PID 1548</code></pre><p>然后再启动 adb 就没问题了。</p><h3 id="com-android-ddmlib-AdbCommandRejectedException"><a href="#com-android-ddmlib-AdbCommandRejectedException" class="headerlink" title="com.android.ddmlib.AdbCommandRejectedException"></a>com.android.ddmlib.AdbCommandRejectedException</h3><p>在 Android Studio 里新建一个模拟器，但是用 adb 一直连接不上，提示：</p><pre><code>com.android.ddmlib.AdbCommandRejectedException: device unauthorized.This adb server&#39;s $ADB_VENDOR_KEYS is not setTry &#39;adb kill-server&#39; if that seems wrong.Otherwise check for a confirmation dialog on your device.</code></pre><p>在手机上安装一个终端然后执行 su 提示没有该命令，这不正常。</p><p>于是删除该模拟器后重新下载安装一次，这次就正常了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装图像化界面</title>
      <link href="/2020/08/02/Centos%E5%AE%89%E8%A3%85%E5%9B%BE%E5%83%8F%E5%8C%96%E7%95%8C%E9%9D%A2/"/>
      <url>/2020/08/02/Centos%E5%AE%89%E8%A3%85%E5%9B%BE%E5%83%8F%E5%8C%96%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="安装GNOME桌面"><a href="#安装GNOME桌面" class="headerlink" title="安装GNOME桌面"></a>安装GNOME桌面</h2><blockquote><p>时间会稍微长一些，因为要下载大概600M的东西</p></blockquote><pre><code>yum install -y  epel-release &amp;&amp; yum -y updateyum groupinstall &quot;GNOME Desktop&quot; &quot;Graphical Administration Tools&quot;</code></pre><h2 id="安装VNC-Server"><a href="#安装VNC-Server" class="headerlink" title="安装VNC Server"></a>安装VNC Server</h2><pre><code>yum -y install vnc &quot;vnc-server&quot;</code></pre><h2 id="设置vnc-server-密码"><a href="#设置vnc-server-密码" class="headerlink" title="设置vnc server 密码"></a>设置vnc server 密码</h2><pre><code>vncserver</code></pre><blockquote><p>输入两次密码</p></blockquote><h2 id="启动vncserver"><a href="#启动vncserver" class="headerlink" title="启动vncserver"></a>启动vncserver</h2><p>注意这里的<code>:1</code>前面有空格！</p><pre><code>vncserver :1</code></pre><h2 id="查看并在云服务器后台开方端口"><a href="#查看并在云服务器后台开方端口" class="headerlink" title="查看并在云服务器后台开方端口"></a>查看并在云服务器后台开方端口</h2><ul><li><h3 id="如图找到相应的端口"><a href="#如图找到相应的端口" class="headerlink" title="如图找到相应的端口"></a>如图找到相应的端口</h3></li></ul><pre><code> ps -aux |grep vnc</code></pre><img src="查看VNC的端口.png" alt=""  /><ul><li><h3 id="在阿里云后台开发端口"><a href="#在阿里云后台开发端口" class="headerlink" title="在阿里云后台开发端口"></a>在阿里云后台开发端口</h3></li></ul><p><img src="%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E7%AB%AF%E5%8F%A3.png" alt=""></p><h2 id="下载安装-vncviewer"><a href="#下载安装-vncviewer" class="headerlink" title="下载安装 vncviewer"></a>下载安装 <code>vncviewer</code></h2><ul><li>给出官网地址 自行下载安装</li></ul><p>(vncviewer)[<a href="https://www.realvnc.com/en/connect/download/viewer/]" target="_blank" rel="noopener">https://www.realvnc.com/en/connect/download/viewer/]</a></p><ul><li><code>vncviewer</code>连接服务器</li></ul><img src="connection1.png" alt=""  /><img src="connection2.png" alt=""  /><img src="connection3.jpg" alt=""  /><p><img src="connection4.png" alt=""></p><h2 id="关闭VNC进程"><a href="#关闭VNC进程" class="headerlink" title="关闭VNC进程"></a>关闭<code>VNC</code>进程</h2><pre><code>vncserver -kill :1</code></pre><h2 id="设置centos系统默认的启动方式"><a href="#设置centos系统默认的启动方式" class="headerlink" title="设置centos系统默认的启动方式"></a>设置<code>centos</code>系统默认的启动方式</h2><pre><code>systemctl set-default multi-user.target  //设置成命令模式systemctl set-default graphical.target  //设置成图形模式</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>screen管理会话</title>
      <link href="/2020/07/28/screen%E7%AE%A1%E7%90%86%E4%BC%9A%E8%AF%9D/"/>
      <url>/2020/07/28/screen%E7%AE%A1%E7%90%86%E4%BC%9A%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="开始使用Screen"><a href="#开始使用Screen" class="headerlink" title="开始使用Screen"></a>开始使用Screen</h2><p>简单来说，Screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。在screen中创建一个新的窗口有这样几种方式：</p><p>1．直接在命令行键入screen命令</p><pre><code>[root@tivf06 ~]# screen</code></pre><p>Screen将创建一个执行shell的全屏窗口。你可以执行任意shell程序，就像在ssh窗口中那样。在该窗口中键入exit退出该窗口，如果这是该screen会话的唯一窗口，该screen会话退出，否则screen自动切换到前一个窗口。</p><p>2．Screen命令后跟你要执行的程序。</p><pre><code>[root@tivf06 ~]# screen vi test.c</code></pre><p>Screen创建一个执行vi test.c的单窗口会话，退出vi将退出该窗口/会话。</p><p>3．以上两种方式都创建新的screen会话。我们还可以在一个已有screen会话中创建新的窗口。在当前screen窗口中键入<code>C-a c</code>，即Ctrl键+a键，之后再按下c键，screen 在该会话内生成一个新的窗口并切换到该窗口。</p><p>screen还有更高级的功能。你可以不中断screen窗口中程序的运行而暂时断开（detach）screen会话，并在随后时间重新连接（attach）该会话，重新控制各窗口中运行的程序。例如，我们打开一个screen窗口编辑/tmp/abc文件：</p><pre><code>[root@tivf06 ~]# screen vi /tmp/abc</code></pre><p>之后我们想暂时退出做点别的事情，比如出去散散步，那么在screen窗口键入<code>C-a d</code>，Screen会给出detached提示：</p><h5 id="暂时中断会话"><a href="#暂时中断会话" class="headerlink" title="暂时中断会话"></a>暂时中断会话</h5><p><img src="vi.jpg" alt="暂时中断会话"></p><p>半个小时之后回来了，找到该screen会话：</p><pre><code>[root@tivf06 ~]# screen -ls``There is a screen on:``    ``16582.pts-1.tivf06   (Detached)``1 Socket in /tmp/screens/S-root.</code></pre><p>重新连接会话：</p><pre><code>[root@tivf06 ~]# screen -r 16582</code></pre><p>看看出现什么了，太棒了，一切都在。继续干吧。</p><p>你可能注意到给screen发送命令使用了特殊的键组合C-a。这是因为我们在键盘上键入的信息是直接发送给当前screen窗口，必须用其他方式向screen窗口管理器发出命令，默认情况下，screen接收以C-a开始的命令。这种命令形式在screen中叫做键绑定（key binding），C-a叫做命令字符（command character）。</p><p>可以通过<code>C-a ?</code>来查看所有的键绑定，常用的键绑定有：</p><pre><code>C-a ?     显示所有键绑定信息C-a w显示所有窗口列表C-a C-a切换到之前显示的窗口C-a c创建一个新的运行shell的窗口并切换到该窗口C-a n切换到下一个窗口C-a p切换到前一个窗口(与C-a n相对)C-a 0..9切换到窗口0..9C-a a发送 C-a到当前窗口C-a d暂时断开screen会话C-a k杀掉当前窗口C-a [进入拷贝/回滚模式</code></pre><h2 id="Screen常用选项"><a href="#Screen常用选项" class="headerlink" title="Screen常用选项"></a>Screen常用选项</h2><p>使用键绑定C-a ?命令可以看到, 默认的命令字符（Command key）为C-a，转义C-a（literal ^a）的字符为a：</p><h5 id="Screen-常用选项"><a href="#Screen-常用选项" class="headerlink" title="Screen 常用选项"></a>Screen 常用选项</h5><p><img src="keybindings.jpg" alt="Screen 常用选项"></p><p>因为screen把C-a看作是screen命令的开始，所以如果你想要screen窗口接收到C-a字符，就要输入C-a a。Screen也允许你使用-e选项设置自己的命令字符和转义字符，其格式为：</p><p>-exy x为命令字符，y为转义命令字符的字符</p><p>下面命令启动的screen会话指定了命令字符为C-t，转义C-t的字符为t，通过C-t ?命令可以看到该变化。</p><pre><code>[root@tivf18 root]# screen -e^tt</code></pre><h5 id="自定义命令字符和转义字符"><a href="#自定义命令字符和转义字符" class="headerlink" title="自定义命令字符和转义字符"></a>自定义命令字符和转义字符</h5><p><img src="newkeybinding.jpg" alt="自定义命令字符和转义字符"></p><h2 id="管理你的远程会话"><a href="#管理你的远程会话" class="headerlink" title="管理你的远程会话"></a>管理你的远程会话</h2><p>先来看看如何使用screen解决SIGHUP问题，比如现在我们要ftp传输一个大文件。如果按老的办法，SSH登录到系统，直接ftp命令开始传输，之后。。如果网络速度还可以，恭喜你，不用等太长时间了；如果网络不好，老老实实等着吧，只能传输完毕再断开SSH连接了。让我们使用screen来试试。</p><p>SSH登录到系统，在命令行键入screen。</p><pre><code>[root@tivf18 root]# screen</code></pre><p>在screen shell窗口中输入ftp命令，登录，开始传输。不愿意等了？OK，在窗口中键入C-a d：</p><h5 id="管理你的远程会话-1"><a href="#管理你的远程会话-1" class="headerlink" title="管理你的远程会话"></a>管理你的远程会话</h5><p><img src="ftp.jpg" alt="管理你的远程会话"></p><p>然后。。退出SSH登录？随你怎样，只要别杀掉screen会话。</p><p>是不是很方便？更进一步，其实我们可以利用screen这种功能来管理你的远程会话，保存你所有的工作内容。你是不是每次登录到系统都要开很多窗口，然后每天都要重复打开关闭这些窗口？让screen来帮你“保存”吧，你只需要打开一个ssh窗口，创建需要的screen窗口，退出的时候C-a d“保存”你的工作，下次登录后直接screen -r <screen_pid>就可以了。</p><p>最好能给每个窗口起一个名字，这样好记些。使用C-a A给窗口起名字。使用C-a w可以看到这些窗口名字，可能名字出现的位置不同。使用putty：</p><h5 id="putty"><a href="#putty" class="headerlink" title="putty"></a>putty</h5><p><img src="putty.jpg" alt="putty"></p><p>使用telnet：</p><h5 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h5><p><img src="telnet.jpg" alt="telnet"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2020/07/26/Redis/"/>
      <url>/2020/07/26/Redis/</url>
      
        <content type="html"><![CDATA[<p><img src="Redis.png" alt="Redis"></p><blockquote><p>给出xmind文件地址</p></blockquote><p><a href="https://1drv.ms/u/s!Ah1WHCLi3Lhigo1rsnFIWDgPaTIFOg?e=JdMCTZ" target="_blank" rel="noopener">Redis.xmind</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下使用selenium</title>
      <link href="/2020/07/26/linux%E4%B8%8B%E4%BD%BF%E7%94%A8selenium/"/>
      <url>/2020/07/26/linux%E4%B8%8B%E4%BD%BF%E7%94%A8selenium/</url>
      
        <content type="html"><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li><code>Centos 7</code></li><li>注意不要使用<code>Centos8</code> 会出现下面的库安装不上的问题</li></ul><h2 id="安装最新的-Google-Chrome"><a href="#安装最新的-Google-Chrome" class="headerlink" title="安装最新的 Google Chrome"></a>安装最新的 Google Chrome</h2><pre class=" language-sh"><code class="language-sh">yum install https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</code></pre><h2 id="安装必要的库"><a href="#安装必要的库" class="headerlink" title="安装必要的库"></a>安装必要的库</h2><pre class=" language-shell"><code class="language-shell">yum install mesa-libOSMesa-devel gnu-free-sans-fonts wqy-zenhei-fonts</code></pre><h2 id="查看谷歌浏览器版本"><a href="#查看谷歌浏览器版本" class="headerlink" title="查看谷歌浏览器版本"></a>查看谷歌浏览器版本</h2><pre class=" language-shell"><code class="language-shell">google-chrome --version </code></pre><h2 id="安装-chromedriver"><a href="#安装-chromedriver" class="headerlink" title="安装 chromedriver"></a>安装 <code>chromedriver</code></h2><pre class=" language-sh"><code class="language-sh">wget http://npm.taobao.org/mirrors/chromedriver/2.41/chromedriver_linux64.zipunzip chromedriver_linux64.zipmv chromedriver /usr/bin/chmod +x /usr/bin/chromedriver</code></pre><h2 id="加入path"><a href="#加入path" class="headerlink" title="加入path"></a>加入path</h2><pre class=" language-shell"><code class="language-shell">vim .bashrc在里面加入：export PATH="$PATH:/usr/bin/chromedriver"source ~/.bashrc</code></pre><h2 id="查看path"><a href="#查看path" class="headerlink" title="查看path"></a>查看<code>path</code></h2><pre class=" language-shell"><code class="language-shell">$PATH</code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Optionschrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 参数是让Chrome在root权限下跑</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-dev-shm-usage'</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 参数是不用打开图形界面</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程和进程</title>
      <link href="/2020/07/26/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/"/>
      <url>/2020/07/26/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><blockquote><p><strong>线程</strong>（英语：<code>thread</code>）是<a href="https://baike.baidu.com/item/操作系统" target="_blank" rel="noopener">操作系统</a>能够进行运算<a href="https://baike.baidu.com/item/调度" target="_blank" rel="noopener">调度</a>的最小单位。它被包含在<a href="https://baike.baidu.com/item/进程" target="_blank" rel="noopener">进程</a>之中，是<a href="https://baike.baidu.com/item/进程" target="_blank" rel="noopener">进程</a></p><p>中的实际运作单位。</p></blockquote><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sing'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dance'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># target 需要的是一个函数，用来指定线程需要执行的任务</span>t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>dance<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建了线程1</span>t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sing<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建了线程2</span><span class="token comment" spellcheck="true"># 启动线程</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="多个线程可以共用一个全局变量"><a href="#多个线程可以共用一个全局变量" class="headerlink" title="多个线程可以共用一个全局变量"></a>多个线程可以共用一个全局变量</h3><ul><li>全局解释器锁</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 定义全局变量 ticket</span>ticket<span class="token operator">=</span><span class="token number">20</span><span class="token comment" spellcheck="true"># 创建锁</span>lock<span class="token operator">=</span>threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sell_ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> ticket    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 加锁 阻止另外的线程进入 修改全局变量</span>        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            ticket<span class="token operator">-=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 事件完成之后开锁</span>            lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}卖出一张，剩{} 张'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>ticket<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'no ticket!'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token comment" spellcheck="true"># 创建两个线程</span>t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sell_ticket<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'线程1'</span><span class="token punctuation">)</span>t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sell_ticket<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'线程2'</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="线程之间进行通信"><a href="#线程之间进行通信" class="headerlink" title="线程之间进行通信"></a>线程之间进行通信</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> queue<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'生产了面包 '</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 生产者向队列中加入內容</span>        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>f<span class="token string">'break{i}'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># q.get() 方法是一个堵塞的方法</span>        <span class="token comment" spellcheck="true"># 消费者从队列中取到先放入的內容</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'买到了面包 {q.get()}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建队列  先进先出</span>q<span class="token operator">=</span>queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>p1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>produce<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'p1'</span><span class="token punctuation">)</span>c1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>customer<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'c1'</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li><p><code>ThreadPoolExecutor</code></p></li><li><p><code>url_list</code> 包含的是所有<code>down_ts</code> 里的列表</p></li><li><p>多用于耗时操作 <code>resquest</code>  <code>file IO</code>等</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>thread <span class="token keyword">import</span> ThreadPoolExecutor_ThreadPool_max_workers<span class="token operator">=</span><span class="token number">20</span>  <span class="token comment" spellcheck="true"># 启动的线程数20个线程</span>url_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span><span class="token string">'https://www.163.com'</span><span class="token punctuation">,</span><span class="token string">'https://www.qq.com'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">down_ts</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">multi_threaded_download</span><span class="token punctuation">(</span>url_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span>_ThreadPool_max_workers<span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>        executor<span class="token punctuation">.</span>map<span class="token punctuation">(</span>down_ts<span class="token punctuation">,</span> url_list<span class="token punctuation">)</span></code></pre><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><blockquote><p><strong>进程</strong>（<code>Process</code>）是计算机中的程序关于某数据集合上的一次运行活动，是<strong>系统</strong>进行资源<strong>分配</strong>和</p><p><strong>调度</strong>的基本单位</p></blockquote><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">dance</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'dancing  pid={os.getpid()}'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">song</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'song  pid={os.getpid()}'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'主进程ID{os.getpid()}'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建了两个进程</span>    <span class="token comment" spellcheck="true"># target 用来表示执行的任务 args 有来传参 ，类型是一个元组</span>    p1<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>dance<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p2<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>song<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="多进程之间不能共享全局变量"><a href="#多进程之间不能共享全局变量" class="headerlink" title="多进程之间不能共享全局变量"></a>多进程之间不能共享全局变量</h3><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">produce</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'生产了++++++++++pid {os.getpid()}  {i}'</span><span class="token punctuation">)</span>        x<span class="token punctuation">.</span>put<span class="token punctuation">(</span>f<span class="token string">'pid {os.getpid()} {i}'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'消费了---------- {x.get()}'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    p1<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>produce<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    c2<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>consumer <span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    c2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><ul><li><code>ProcessPoolExecutor</code></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    t_start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{msg} 开始执行，进程ID {os.getpid()}'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token string">'执行完毕花费 {} s'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>t_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    _ProcessPool_max_workers<span class="token operator">=</span><span class="token number">3</span>    workers<span class="token operator">=</span>list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> ProcessPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span>_ProcessPool_max_workers<span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>            executor<span class="token punctuation">.</span>map<span class="token punctuation">(</span>worker<span class="token punctuation">,</span> workers<span class="token punctuation">)</span></code></pre><ul><li><h3 id="multiprocessing中的Pool-进程池"><a href="#multiprocessing中的Pool-进程池" class="headerlink" title="multiprocessing中的Pool 进程池"></a><code>multiprocessing</code>中的<code>Pool</code> 进程池</h3></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>pool <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    t_start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{msg} 开始执行，进程ID {os.getpid()}'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token string">'执行完毕花费 {} s'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>t_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool<span class="token operator">=</span>Pool<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Pool.apply_async(要调用的目标,(传递给目标的参数元组,))</span>        <span class="token comment" spellcheck="true"># 每次循环将会用空闲出来的子进程去调用目标</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>worker<span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># pool.map(worker,list(range(10)))  或者调用map函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------======start=====-----'</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 关闭进程池，关闭后pool不再接受新的请求</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 等待pool中的所有子进程完成，必须放在close语句后 给主进程让步</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------======stop=====-----'</span><span class="token punctuation">)</span></code></pre><h2 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列 queue"></a>队列 <code>queue</code></h2><ul><li>进程间通信</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessingq<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建队列时可以指定最大的长度  默认值是0 表示不限长度</span>q<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 长度最多只有5个 够5个后就开始堵塞 直到取出队列中的元素才可以放入元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>full<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 判断队列是否满了</span><span class="token comment" spellcheck="true"># 往队列里放了 'how'  block=True 表示是堵塞的，如果队列满了就进行等待</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'how'</span><span class="token punctuation">,</span>block<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 不进行等待</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span>block<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>time<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># block=True 表示是堵塞的，如果队列满了就进行等待</span></code></pre><ul><li>线程间通信</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> queueq<span class="token operator">=</span>queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="二者之间的关系与联系"><a href="#二者之间的关系与联系" class="headerlink" title="二者之间的关系与联系"></a>二者之间的关系与联系</h2><blockquote><p>同一进程之间的不同线程可以共享全局变量</p><p>不同进程之间不能共享全局变量</p><p>一个程序里至少要有一个主进程，一个主进程里至少有一个主线程</p></blockquote><h2 id="多线程与多进程的使用"><a href="#多线程与多进程的使用" class="headerlink" title="多线程与多进程的使用"></a>多线程与多进程的使用</h2><blockquote><p><code>Python</code>底层只要使用线程默认加锁</p><p>在多个<code>CPU</code>进行切换时　由于<code>GIL</code>(全局解释器锁的存在)　多进程的效率高于多线程</p><p>在<code>request</code>发送请求时需要耗时　可使用多个线程提高程序的效率</p><p>在需要进行大量的<code>IO</code>读写时使用多线程</p><p>在进行大量的计算时使用多进程</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
